//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_g "errors";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_ef "io";_d "math";);var (_bcg map[int ]code ;_aa map[int ]code ;_dge map[int ]code ;_bg map[int ]code ;_ed map[int ]code ;_ffg map[int ]byte ;_ca =code {Code :1<<4,BitsWritten :12};
_ac =code {Code :3<<3,BitsWritten :13};_gcf =code {Code :2<<3,BitsWritten :13};_fb =code {Code :1<<12,BitsWritten :4};_fbe =code {Code :1<<13,BitsWritten :3};_ffc =code {Code :1<<15,BitsWritten :1};_fgg =code {Code :3<<13,BitsWritten :3};_egg =code {Code :3<<10,BitsWritten :6};
_bf =code {Code :3<<9,BitsWritten :7};_caf =code {Code :2<<13,BitsWritten :3};_eab =code {Code :2<<10,BitsWritten :6};_afb =code {Code :2<<9,BitsWritten :7};);func init (){_gb =&treeNode {_fdg :true ,_ffgb :_a };_gbe =&treeNode {_ffgb :_ag ,_gdeg :_gb };
_gbe ._ggfe =_gbe ;_bc =&tree {_acd :&treeNode {}};if _gg :=_bc .fillWithNode (12,0,_gbe );_gg !=nil {panic (_gg .Error ());};if _agf :=_bc .fillWithNode (12,1,_gb );_agf !=nil {panic (_agf .Error ());};_f =&tree {_acd :&treeNode {}};for _bb :=0;_bb < len (_df );
_bb ++{for _c :=0;_c < len (_df [_bb ]);_c ++{if _bd :=_f .fill (_bb +2,int (_df [_bb ][_c ]),int (_bbgf [_bb ][_c ]));_bd !=nil {panic (_bd .Error ());};};};if _ba :=_f .fillWithNode (12,0,_gbe );_ba !=nil {panic (_ba .Error ());};if _cf :=_f .fillWithNode (12,1,_gb );
_cf !=nil {panic (_cf .Error ());};_fg =&tree {_acd :&treeNode {}};for _dd :=0;_dd < len (_af );_dd ++{for _ga :=0;_ga < len (_af [_dd ]);_ga ++{if _dc :=_fg .fill (_dd +4,int (_af [_dd ][_ga ]),int (_cc [_dd ][_ga ]));_dc !=nil {panic (_dc .Error ());
};};};if _bbd :=_fg .fillWithNode (12,0,_gbe );_bbd !=nil {panic (_bbd .Error ());};if _dg :=_fg .fillWithNode (12,1,_gb );_dg !=nil {panic (_dg .Error ());};_ff =&tree {_acd :&treeNode {}};if _fa :=_ff .fill (4,1,_gc );_fa !=nil {panic (_fa .Error ());
};if _gbd :=_ff .fill (3,1,_ea );_gbd !=nil {panic (_gbd .Error ());};if _gf :=_ff .fill (1,1,0);_gf !=nil {panic (_gf .Error ());};if _cd :=_ff .fill (3,3,1);_cd !=nil {panic (_cd .Error ());};if _bbg :=_ff .fill (6,3,2);_bbg !=nil {panic (_bbg .Error ());
};if _cfa :=_ff .fill (7,3,3);_cfa !=nil {panic (_cfa .Error ());};if _eg :=_ff .fill (3,2,-1);_eg !=nil {panic (_eg .Error ());};if _ggc :=_ff .fill (6,2,-2);_ggc !=nil {panic (_ggc .Error ());};if _ge :=_ff .fill (7,2,-3);_ge !=nil {panic (_ge .Error ());
};};func _cdb (_ebab int )([]byte ,int ){var _ffb []byte ;for _add :=0;_add < 6;_add ++{_ffb ,_ebab =_dee (_ffb ,_ebab ,_ac );};return _ffb ,_ebab %8;};var _bbgf =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
type Decoder struct{_ec int ;_bgc int ;_bgg int ;_ega []byte ;_bgcb int ;_ab bool ;_gea bool ;_cg bool ;_cff bool ;_fc bool ;_ead bool ;_gfb bool ;_geg int ;_cgc int ;_bed []int ;_de []int ;_eba int ;_ae int ;_dfd int ;_ecc int ;_cdc *_b .Reader ;_da tiffType ;
_ee error ;};func (_fce *Decoder )looseFetchEOL ()(bool ,error ){_cag ,_ebae :=_fce ._cdc .ReadBits (12);if _ebae !=nil {return false ,_ebae ;};switch _cag {case 0x1:return true ,nil ;case 0x0:for {_fe ,_ege :=_fce ._cdc .ReadBool ();if _ege !=nil {return false ,_ege ;
};if _fe {return true ,nil ;};};default:return false ,nil ;};};var (_gb *treeNode ;_gbe *treeNode ;_f *tree ;_fg *tree ;_bc *tree ;_ff *tree ;_a =-2000;_ag =-1000;_gc =-3000;_ea =-4000;);func (_dcb *Decoder )tryFetchEOL ()(bool ,error ){_dca ,_faa :=_dcb ._cdc .ReadBits (12);
if _faa !=nil {return false ,_faa ;};return _dca ==0x1,nil ;};func init (){_bcg =make (map[int ]code );_bcg [0]=code {Code :13<<8|3<<6,BitsWritten :10};_bcg [1]=code {Code :2<<(5+8),BitsWritten :3};_bcg [2]=code {Code :3<<(6+8),BitsWritten :2};_bcg [3]=code {Code :2<<(6+8),BitsWritten :2};
_bcg [4]=code {Code :3<<(5+8),BitsWritten :3};_bcg [5]=code {Code :3<<(4+8),BitsWritten :4};_bcg [6]=code {Code :2<<(4+8),BitsWritten :4};_bcg [7]=code {Code :3<<(3+8),BitsWritten :5};_bcg [8]=code {Code :5<<(2+8),BitsWritten :6};_bcg [9]=code {Code :4<<(2+8),BitsWritten :6};
_bcg [10]=code {Code :4<<(1+8),BitsWritten :7};_bcg [11]=code {Code :5<<(1+8),BitsWritten :7};_bcg [12]=code {Code :7<<(1+8),BitsWritten :7};_bcg [13]=code {Code :4<<8,BitsWritten :8};_bcg [14]=code {Code :7<<8,BitsWritten :8};_bcg [15]=code {Code :12<<8,BitsWritten :9};
_bcg [16]=code {Code :5<<8|3<<6,BitsWritten :10};_bcg [17]=code {Code :6<<8,BitsWritten :10};_bcg [18]=code {Code :2<<8,BitsWritten :10};_bcg [19]=code {Code :12<<8|7<<5,BitsWritten :11};_bcg [20]=code {Code :13<<8,BitsWritten :11};_bcg [21]=code {Code :13<<8|4<<5,BitsWritten :11};
_bcg [22]=code {Code :6<<8|7<<5,BitsWritten :11};_bcg [23]=code {Code :5<<8,BitsWritten :11};_bcg [24]=code {Code :2<<8|7<<5,BitsWritten :11};_bcg [25]=code {Code :3<<8,BitsWritten :11};_bcg [26]=code {Code :12<<8|10<<4,BitsWritten :12};_bcg [27]=code {Code :12<<8|11<<4,BitsWritten :12};
_bcg [28]=code {Code :12<<8|12<<4,BitsWritten :12};_bcg [29]=code {Code :12<<8|13<<4,BitsWritten :12};_bcg [30]=code {Code :6<<8|8<<4,BitsWritten :12};_bcg [31]=code {Code :6<<8|9<<4,BitsWritten :12};_bcg [32]=code {Code :6<<8|10<<4,BitsWritten :12};_bcg [33]=code {Code :6<<8|11<<4,BitsWritten :12};
_bcg [34]=code {Code :13<<8|2<<4,BitsWritten :12};_bcg [35]=code {Code :13<<8|3<<4,BitsWritten :12};_bcg [36]=code {Code :13<<8|4<<4,BitsWritten :12};_bcg [37]=code {Code :13<<8|5<<4,BitsWritten :12};_bcg [38]=code {Code :13<<8|6<<4,BitsWritten :12};_bcg [39]=code {Code :13<<8|7<<4,BitsWritten :12};
_bcg [40]=code {Code :6<<8|12<<4,BitsWritten :12};_bcg [41]=code {Code :6<<8|13<<4,BitsWritten :12};_bcg [42]=code {Code :13<<8|10<<4,BitsWritten :12};_bcg [43]=code {Code :13<<8|11<<4,BitsWritten :12};_bcg [44]=code {Code :5<<8|4<<4,BitsWritten :12};_bcg [45]=code {Code :5<<8|5<<4,BitsWritten :12};
_bcg [46]=code {Code :5<<8|6<<4,BitsWritten :12};_bcg [47]=code {Code :5<<8|7<<4,BitsWritten :12};_bcg [48]=code {Code :6<<8|4<<4,BitsWritten :12};_bcg [49]=code {Code :6<<8|5<<4,BitsWritten :12};_bcg [50]=code {Code :5<<8|2<<4,BitsWritten :12};_bcg [51]=code {Code :5<<8|3<<4,BitsWritten :12};
_bcg [52]=code {Code :2<<8|4<<4,BitsWritten :12};_bcg [53]=code {Code :3<<8|7<<4,BitsWritten :12};_bcg [54]=code {Code :3<<8|8<<4,BitsWritten :12};_bcg [55]=code {Code :2<<8|7<<4,BitsWritten :12};_bcg [56]=code {Code :2<<8|8<<4,BitsWritten :12};_bcg [57]=code {Code :5<<8|8<<4,BitsWritten :12};
_bcg [58]=code {Code :5<<8|9<<4,BitsWritten :12};_bcg [59]=code {Code :2<<8|11<<4,BitsWritten :12};_bcg [60]=code {Code :2<<8|12<<4,BitsWritten :12};_bcg [61]=code {Code :5<<8|10<<4,BitsWritten :12};_bcg [62]=code {Code :6<<8|6<<4,BitsWritten :12};_bcg [63]=code {Code :6<<8|7<<4,BitsWritten :12};
_aa =make (map[int ]code );_aa [0]=code {Code :53<<8,BitsWritten :8};_aa [1]=code {Code :7<<(2+8),BitsWritten :6};_aa [2]=code {Code :7<<(4+8),BitsWritten :4};_aa [3]=code {Code :8<<(4+8),BitsWritten :4};_aa [4]=code {Code :11<<(4+8),BitsWritten :4};_aa [5]=code {Code :12<<(4+8),BitsWritten :4};
_aa [6]=code {Code :14<<(4+8),BitsWritten :4};_aa [7]=code {Code :15<<(4+8),BitsWritten :4};_aa [8]=code {Code :19<<(3+8),BitsWritten :5};_aa [9]=code {Code :20<<(3+8),BitsWritten :5};_aa [10]=code {Code :7<<(3+8),BitsWritten :5};_aa [11]=code {Code :8<<(3+8),BitsWritten :5};
_aa [12]=code {Code :8<<(2+8),BitsWritten :6};_aa [13]=code {Code :3<<(2+8),BitsWritten :6};_aa [14]=code {Code :52<<(2+8),BitsWritten :6};_aa [15]=code {Code :53<<(2+8),BitsWritten :6};_aa [16]=code {Code :42<<(2+8),BitsWritten :6};_aa [17]=code {Code :43<<(2+8),BitsWritten :6};
_aa [18]=code {Code :39<<(1+8),BitsWritten :7};_aa [19]=code {Code :12<<(1+8),BitsWritten :7};_aa [20]=code {Code :8<<(1+8),BitsWritten :7};_aa [21]=code {Code :23<<(1+8),BitsWritten :7};_aa [22]=code {Code :3<<(1+8),BitsWritten :7};_aa [23]=code {Code :4<<(1+8),BitsWritten :7};
_aa [24]=code {Code :40<<(1+8),BitsWritten :7};_aa [25]=code {Code :43<<(1+8),BitsWritten :7};_aa [26]=code {Code :19<<(1+8),BitsWritten :7};_aa [27]=code {Code :36<<(1+8),BitsWritten :7};_aa [28]=code {Code :24<<(1+8),BitsWritten :7};_aa [29]=code {Code :2<<8,BitsWritten :8};
_aa [30]=code {Code :3<<8,BitsWritten :8};_aa [31]=code {Code :26<<8,BitsWritten :8};_aa [32]=code {Code :27<<8,BitsWritten :8};_aa [33]=code {Code :18<<8,BitsWritten :8};_aa [34]=code {Code :19<<8,BitsWritten :8};_aa [35]=code {Code :20<<8,BitsWritten :8};
_aa [36]=code {Code :21<<8,BitsWritten :8};_aa [37]=code {Code :22<<8,BitsWritten :8};_aa [38]=code {Code :23<<8,BitsWritten :8};_aa [39]=code {Code :40<<8,BitsWritten :8};_aa [40]=code {Code :41<<8,BitsWritten :8};_aa [41]=code {Code :42<<8,BitsWritten :8};
_aa [42]=code {Code :43<<8,BitsWritten :8};_aa [43]=code {Code :44<<8,BitsWritten :8};_aa [44]=code {Code :45<<8,BitsWritten :8};_aa [45]=code {Code :4<<8,BitsWritten :8};_aa [46]=code {Code :5<<8,BitsWritten :8};_aa [47]=code {Code :10<<8,BitsWritten :8};
_aa [48]=code {Code :11<<8,BitsWritten :8};_aa [49]=code {Code :82<<8,BitsWritten :8};_aa [50]=code {Code :83<<8,BitsWritten :8};_aa [51]=code {Code :84<<8,BitsWritten :8};_aa [52]=code {Code :85<<8,BitsWritten :8};_aa [53]=code {Code :36<<8,BitsWritten :8};
_aa [54]=code {Code :37<<8,BitsWritten :8};_aa [55]=code {Code :88<<8,BitsWritten :8};_aa [56]=code {Code :89<<8,BitsWritten :8};_aa [57]=code {Code :90<<8,BitsWritten :8};_aa [58]=code {Code :91<<8,BitsWritten :8};_aa [59]=code {Code :74<<8,BitsWritten :8};
_aa [60]=code {Code :75<<8,BitsWritten :8};_aa [61]=code {Code :50<<8,BitsWritten :8};_aa [62]=code {Code :51<<8,BitsWritten :8};_aa [63]=code {Code :52<<8,BitsWritten :8};_dge =make (map[int ]code );_dge [64]=code {Code :3<<8|3<<6,BitsWritten :10};_dge [128]=code {Code :12<<8|8<<4,BitsWritten :12};
_dge [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dge [256]=code {Code :5<<8|11<<4,BitsWritten :12};_dge [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dge [384]=code {Code :3<<8|4<<4,BitsWritten :12};_dge [448]=code {Code :3<<8|5<<4,BitsWritten :12};
_dge [512]=code {Code :3<<8|12<<3,BitsWritten :13};_dge [576]=code {Code :3<<8|13<<3,BitsWritten :13};_dge [640]=code {Code :2<<8|10<<3,BitsWritten :13};_dge [704]=code {Code :2<<8|11<<3,BitsWritten :13};_dge [768]=code {Code :2<<8|12<<3,BitsWritten :13};
_dge [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dge [896]=code {Code :3<<8|18<<3,BitsWritten :13};_dge [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dge [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_dge [1088]=code {Code :3<<8|21<<3,BitsWritten :13};
_dge [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dge [1216]=code {Code :119<<3,BitsWritten :13};_dge [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_dge [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_dge [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_dge [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dge [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_dge [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_dge [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_dge [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_bg =make (map[int ]code );_bg [64]=code {Code :27<<(3+8),BitsWritten :5};_bg [128]=code {Code :18<<(3+8),BitsWritten :5};_bg [192]=code {Code :23<<(2+8),BitsWritten :6};_bg [256]=code {Code :55<<(1+8),BitsWritten :7};_bg [320]=code {Code :54<<8,BitsWritten :8};
_bg [384]=code {Code :55<<8,BitsWritten :8};_bg [448]=code {Code :100<<8,BitsWritten :8};_bg [512]=code {Code :101<<8,BitsWritten :8};_bg [576]=code {Code :104<<8,BitsWritten :8};_bg [640]=code {Code :103<<8,BitsWritten :8};_bg [704]=code {Code :102<<8,BitsWritten :9};
_bg [768]=code {Code :102<<8|1<<7,BitsWritten :9};_bg [832]=code {Code :105<<8,BitsWritten :9};_bg [896]=code {Code :105<<8|1<<7,BitsWritten :9};_bg [960]=code {Code :106<<8,BitsWritten :9};_bg [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_bg [1088]=code {Code :107<<8,BitsWritten :9};
_bg [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_bg [1216]=code {Code :108<<8,BitsWritten :9};_bg [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_bg [1344]=code {Code :109<<8,BitsWritten :9};_bg [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_bg [1472]=code {Code :76<<8,BitsWritten :9};
_bg [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_bg [1600]=code {Code :77<<8,BitsWritten :9};_bg [1664]=code {Code :24<<(2+8),BitsWritten :6};_bg [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_ed =make (map[int ]code );_ed [1792]=code {Code :1<<8,BitsWritten :11};
_ed [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_ed [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_ed [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_ed [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_ed [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_ed [2176]=code {Code :1<<8|5<<4,BitsWritten :12};
_ed [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_ed [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_ed [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_ed [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_ed [2496]=code {Code :1<<8|14<<4,BitsWritten :12};
_ed [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ffg =make (map[int ]byte );_ffg [0]=0xFF;_ffg [1]=0xFE;_ffg [2]=0xFC;_ffg [3]=0xF8;_ffg [4]=0xF0;_ffg [5]=0xE0;_ffg [6]=0xC0;_ffg [7]=0x80;_ffg [8]=0x00;};func (_ebf *Decoder )tryFetchEOL1 ()(bool ,error ){_dafe ,_ddd :=_ebf ._cdc .ReadBits (13);
if _ddd !=nil {return false ,_ddd ;};return _dafe ==0x3,nil ;};var (_bda byte =1;_gge byte =0;);const (_ tiffType =iota ;_dce ;_bdg ;_aae ;);func (_daa *Decoder )getNextChangingElement (_fbc int ,_gdc bool )int {_dcg :=0;if !_gdc {_dcg =1;};_cbf :=int (uint32 (_daa ._ecc )&0xFFFFFFFE)+_dcg ;
if _cbf > 2{_cbf -=2;};if _fbc ==0{return _cbf ;};for _bbdb :=_cbf ;_bbdb < _daa ._eba ;_bbdb +=2{if _fbc < _daa ._bed [_bbdb ]{_daa ._ecc =_bbdb ;return _bbdb ;};};return -1;};var _af =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func (_cbeae *Decoder )decode1D ()error {var (_dba int ;_eea error ;);_gde :=true ;_cbeae ._ae =0;for {var _cfad int ;if _gde {_cfad ,_eea =_cbeae .decodeRun (_fg );}else {_cfad ,_eea =_cbeae .decodeRun (_f );};if _eea !=nil {return _eea ;};_dba +=_cfad ;
_cbeae ._de [_cbeae ._ae ]=_dba ;_cbeae ._ae ++;_gde =!_gde ;if _dba >=_cbeae ._ec {break ;};};return nil ;};var _df =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func _gaeg (_ced int )([]byte ,int ){var _gba []byte ;for _ede :=0;_ede < 2;_ede ++{_gba ,_ced =_dee (_gba ,_ced ,_ca );};return _gba ,_ced %8;};type tiffType int ;func _aedf (_cce []byte ,_ecda int ,_edf code )([]byte ,int ){_bfb :=true ;var _ecb []byte ;
_ecb ,_ecda =_dee (nil ,_ecda ,_edf );_gcc :=0;var _eeaf int ;for _gcc < len (_cce ){_eeaf ,_gcc =_egd (_cce ,_bfb ,_gcc );_ecb ,_ecda =_ggd (_ecb ,_ecda ,_eeaf ,_bfb );_bfb =!_bfb ;};return _ecb ,_ecda %8;};var (_be =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_fd =_g .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););func (_acc *Decoder )decodeRowType2 ()error {if _acc ._gfb {_acc ._cdc .Align ();};if _gbc :=_acc .decode1D ();_gbc !=nil {return _gbc ;
};return nil ;};func (_ccb *Decoder )decodeG32D ()error {_ccb ._eba =_ccb ._ae ;_ccb ._de ,_ccb ._bed =_ccb ._bed ,_ccb ._de ;_dga :=true ;var (_cfc bool ;_eff int ;_bcf error ;);_ccb ._ae =0;_eca :for _eff < _ccb ._ec {_dfc :=_ff ._acd ;for {_cfc ,_bcf =_ccb ._cdc .ReadBool ();
if _bcf !=nil {return _bcf ;};_dfc =_dfc .walk (_cfc );if _dfc ==nil {continue _eca ;};if !_dfc ._fdg {continue ;};switch _dfc ._ffgb {case _ea :var _fgga int ;if _dga {_fgga ,_bcf =_ccb .decodeRun (_fg );}else {_fgga ,_bcf =_ccb .decodeRun (_f );};if _bcf !=nil {return _bcf ;
};_eff +=_fgga ;_ccb ._de [_ccb ._ae ]=_eff ;_ccb ._ae ++;if _dga {_fgga ,_bcf =_ccb .decodeRun (_f );}else {_fgga ,_bcf =_ccb .decodeRun (_fg );};if _bcf !=nil {return _bcf ;};_eff +=_fgga ;_ccb ._de [_ccb ._ae ]=_eff ;_ccb ._ae ++;case _gc :_bcc :=_ccb .getNextChangingElement (_eff ,_dga )+1;
if _bcc >=_ccb ._eba {_eff =_ccb ._ec ;}else {_eff =_ccb ._bed [_bcc ];};default:_bbc :=_ccb .getNextChangingElement (_eff ,_dga );if _bbc >=_ccb ._eba ||_bbc ==-1{_eff =_ccb ._ec +_dfc ._ffgb ;}else {_eff =_ccb ._bed [_bbc ]+_dfc ._ffgb ;};_ccb ._de [_ccb ._ae ]=_eff ;
_ccb ._ae ++;_dga =!_dga ;};continue _eca ;};};return nil ;};func (_aec *Decoder )decodeRun (_dbd *tree )(int ,error ){var _ecd int ;_ggca :=_dbd ._acd ;for {_fag ,_daf :=_aec ._cdc .ReadBool ();if _daf !=nil {return 0,_daf ;};_ggca =_ggca .walk (_fag );
if _ggca ==nil {return 0,_g .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};if _ggca ._fdg {_ecd +=_ggca ._ffgb ;switch {case _ggca ._ffgb >=64:_ggca =_dbd ._acd ;
case _ggca ._ffgb >=0:return _ecd ,nil ;default:return _aec ._ec ,nil ;};};};};type code struct{Code uint16 ;BitsWritten int ;};func (_caa *treeNode )walk (_bfbd bool )*treeNode {if _bfbd {return _caa ._gdeg ;};return _caa ._ggfe ;};func _bfd (_edb int )([]byte ,int ){var _ace []byte ;
for _eag :=0;_eag < 6;_eag ++{_ace ,_edb =_dee (_ace ,_edb ,_ca );};return _ace ,_edb %8;};func (_bbe *Decoder )Read (in []byte )(int ,error ){if _bbe ._ee !=nil {return 0,_bbe ._ee ;};_bdgb :=len (in );var (_gd int ;_cgcd int ;);for _bdgb !=0{if _bbe ._cgc >=_bbe ._geg {if _ecf :=_bbe .fetch ();
_ecf !=nil {_bbe ._ee =_ecf ;return 0,_ecf ;};};if _bbe ._geg ==-1{return _gd ,_ef .EOF ;};switch {case _bdgb <=_bbe ._geg -_bbe ._cgc :_bga :=_bbe ._ega [_bbe ._cgc :_bbe ._cgc +_bdgb ];for _ ,_aad :=range _bga {if !_bbe ._cff {_aad =^_aad ;};in [_cgcd ]=_aad ;
_cgcd ++;};_gd +=len (_bga );_bbe ._cgc +=len (_bga );return _gd ,nil ;default:_cbg :=_bbe ._ega [_bbe ._cgc :];for _ ,_db :=range _cbg {if !_bbe ._cff {_db =^_db ;};in [_cgcd ]=_db ;_cgcd ++;};_gd +=len (_cbg );_bbe ._cgc +=len (_cbg );_bdgb -=len (_cbg );
};};return _gd ,nil ;};func _egd (_dgg []byte ,_aac bool ,_gce int )(int ,int ){_cdeg :=0;for _gce < len (_dgg ){if _aac {if _dgg [_gce ]!=_bda {break ;};}else {if _dgg [_gce ]!=_gge {break ;};};_cdeg ++;_gce ++;};return _cdeg ,_gce ;};func (_ddee *Decoder )decode2D ()error {_ddee ._eba =_ddee ._ae ;
_ddee ._de ,_ddee ._bed =_ddee ._bed ,_ddee ._de ;_aee :=true ;var (_eaf bool ;_ebdb int ;_gaea error ;);_ddee ._ae =0;_aaeg :for _ebdb < _ddee ._ec {_bde :=_ff ._acd ;for {_eaf ,_gaea =_ddee ._cdc .ReadBool ();if _gaea !=nil {return _gaea ;};_bde =_bde .walk (_eaf );
if _bde ==nil {continue _aaeg ;};if !_bde ._fdg {continue ;};switch _bde ._ffgb {case _ea :var _dbf int ;if _aee {_dbf ,_gaea =_ddee .decodeRun (_fg );}else {_dbf ,_gaea =_ddee .decodeRun (_f );};if _gaea !=nil {return _gaea ;};_ebdb +=_dbf ;_ddee ._de [_ddee ._ae ]=_ebdb ;
_ddee ._ae ++;if _aee {_dbf ,_gaea =_ddee .decodeRun (_f );}else {_dbf ,_gaea =_ddee .decodeRun (_fg );};if _gaea !=nil {return _gaea ;};_ebdb +=_dbf ;_ddee ._de [_ddee ._ae ]=_ebdb ;_ddee ._ae ++;case _gc :_acb :=_ddee .getNextChangingElement (_ebdb ,_aee )+1;
if _acb >=_ddee ._eba {_ebdb =_ddee ._ec ;}else {_ebdb =_ddee ._bed [_acb ];};default:_ebe :=_ddee .getNextChangingElement (_ebdb ,_aee );if _ebe >=_ddee ._eba ||_ebe ==-1{_ebdb =_ddee ._ec +_bde ._ffgb ;}else {_ebdb =_ddee ._bed [_ebe ]+_bde ._ffgb ;};
_ddee ._de [_ddee ._ae ]=_ebdb ;_ddee ._ae ++;_aee =!_aee ;};continue _aaeg ;};};return nil ;};type treeNode struct{_ggfe *treeNode ;_gdeg *treeNode ;_ffgb int ;_cfae bool ;_fdg bool ;};func _ggdf (_fad []byte ,_dfbg int )int {if _dfbg >=len (_fad ){return _dfbg ;
};if _dfbg < -1{_dfbg =-1;};var _cae byte ;if _dfbg > -1{_cae =_fad [_dfbg ];}else {_cae =_bda ;};_deb :=_dfbg +1;for _deb < len (_fad ){if _fad [_deb ]!=_cae {break ;};_deb ++;};return _deb ;};type tree struct{_acd *treeNode };func (_aed *Decoder )decodeRow ()(_ebd error ){if !_aed ._ead &&_aed ._bgc > 0&&_aed ._bgc ==_aed ._bgg {return _ef .EOF ;
};switch _aed ._da {case _dce :_ebd =_aed .decodeRowType2 ();case _bdg :_ebd =_aed .decodeRowType4 ();case _aae :_ebd =_aed .decodeRowType6 ();};if _ebd !=nil {return _ebd ;};_bdc :=0;_efa :=true ;_aed ._ecc =0;for _fdc :=0;_fdc < _aed ._ae ;_fdc ++{_cfff :=_aed ._ec ;
if _fdc !=_aed ._ae {_cfff =_aed ._de [_fdc ];};if _cfff > _aed ._ec {_cfff =_aed ._ec ;};_eeb :=_bdc /8;for _bdc %8!=0&&_cfff -_bdc > 0{var _egc byte ;if !_efa {_egc =1<<uint (7-(_bdc %8));};_aed ._ega [_eeb ]|=_egc ;_bdc ++;};if _bdc %8==0{_eeb =_bdc /8;
var _agb byte ;if !_efa {_agb =0xff;};for _cfff -_bdc > 7{_aed ._ega [_eeb ]=_agb ;_bdc +=8;_eeb ++;};};for _cfff -_bdc > 0{if _bdc %8==0{_aed ._ega [_eeb ]=0;};var _dcd byte ;if !_efa {_dcd =1<<uint (7-(_bdc %8));};_aed ._ega [_eeb ]|=_dcd ;_bdc ++;};
_efa =!_efa ;};if _bdc !=_aed ._ec {return _g .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_aed ._geg =(_bdc +7)/8;_aed ._bgg ++;return nil ;};func (_gafg *tree )fill (_gda ,_cadg ,_ccd int )error {_bdef :=_gafg ._acd ;for _fgc :=0;_fgc < _gda ;_fgc ++{_ceb :=_gda -1-_fgc ;_dage :=((_cadg >>uint (_ceb ))&1)!=0;_acda :=_bdef .walk (_dage );
if _acda !=nil {if _acda ._fdg {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_bdef =_acda ;continue ;
};_acda =&treeNode {};if _fgc ==_gda -1{_acda ._ffgb =_ccd ;_acda ._fdg =true ;};if _cadg ==0{_acda ._cfae =true ;};_bdef .set (_dage ,_acda );_bdef =_acda ;};return nil ;};func (_eeda *treeNode )set (_bcd bool ,_aaa *treeNode ){if !_bcd {_eeda ._ggfe =_aaa ;
}else {_eeda ._gdeg =_aaa ;};};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_ggf *Decoder )decodeRowType4 ()error {if !_ggf ._ab {return _ggf .decoderRowType41D ();
};if _ggf ._gfb {_ggf ._cdc .Align ();};_ggf ._cdc .Mark ();_geac ,_fac :=_ggf .tryFetchEOL ();if _fac !=nil {return _fac ;};if !_geac &&_ggf ._fc {_ggf ._dfd ++;if _ggf ._dfd > _ggf ._bgcb {return _fd ;};_ggf ._cdc .Reset ();};if !_geac {_ggf ._cdc .Reset ();
};_gdg ,_fac :=_ggf ._cdc .ReadBool ();if _fac !=nil {return _fac ;};if _gdg {if _geac &&_ggf ._ead {if _fac =_ggf .tryFetchRTC2D ();_fac !=nil {return _fac ;};};_fac =_ggf .decode1D ();}else {_fac =_ggf .decode2D ();};if _fac !=nil {return _fac ;};return nil ;
};func (_ffcd *Encoder )encodeG32D (_bad [][]byte )[]byte {var _fcd []byte ;var _gfd int ;for _eee :=0;_eee < len (_bad );_eee +=_ffcd .K {if _ffcd .Rows > 0&&!_ffcd .EndOfBlock &&_eee ==_ffcd .Rows {break ;};_dfb ,_bgcc :=_aedf (_bad [_eee ],_gfd ,_ac );
_fcd =_ffcd .appendEncodedRow (_fcd ,_dfb ,_gfd );if _ffcd .EncodedByteAlign {_bgcc =0;};_gfd =_bgcc ;for _aga :=_eee +1;_aga < (_eee +_ffcd .K )&&_aga < len (_bad );_aga ++{if _ffcd .Rows > 0&&!_ffcd .EndOfBlock &&_aga ==_ffcd .Rows {break ;};_dac ,_gef :=_dee (nil ,_gfd ,_gcf );
var _bedd ,_gbcb ,_baf int ;_efg :=-1;for _efg < len (_bad [_aga ]){_bedd =_ggdf (_bad [_aga ],_efg );_gbcb =_cef (_bad [_aga ],_bad [_aga -1],_efg );_baf =_ggdf (_bad [_aga -1],_gbcb );if _baf < _bedd {_dac ,_gef =_cec (_dac ,_gef );_efg =_baf ;}else {if _d .Abs (float64 (_gbcb -_bedd ))> 3{_dac ,_gef ,_efg =_cga (_bad [_aga ],_dac ,_gef ,_efg ,_bedd );
}else {_dac ,_gef =_cgd (_dac ,_gef ,_bedd ,_gbcb );_efg =_bedd ;};};};_fcd =_ffcd .appendEncodedRow (_fcd ,_dac ,_gfd );if _ffcd .EncodedByteAlign {_gef =0;};_gfd =_gef %8;};};if _ffcd .EndOfBlock {_dcaa ,_ :=_cdb (_gfd );_fcd =_ffcd .appendEncodedRow (_fcd ,_dcaa ,_gfd );
};return _fcd ;};func (_bgae *Encoder )encodeG4 (_ccf [][]byte )[]byte {_egb :=make ([][]byte ,len (_ccf ));copy (_egb ,_ccf );_egb =_bbcf (_egb );var _abd []byte ;var _dagf int ;for _cbfb :=1;_cbfb < len (_egb );_cbfb ++{if _bgae .Rows > 0&&!_bgae .EndOfBlock &&_cbfb ==(_bgae .Rows +1){break ;
};var _ebea []byte ;var _eeg ,_cbgb ,_gcd int ;_faf :=_dagf ;_cdd :=-1;for _cdd < len (_egb [_cbfb ]){_eeg =_ggdf (_egb [_cbfb ],_cdd );_cbgb =_cef (_egb [_cbfb ],_egb [_cbfb -1],_cdd );_gcd =_ggdf (_egb [_cbfb -1],_cbgb );if _gcd < _eeg {_ebea ,_faf =_dee (_ebea ,_faf ,_fb );
_cdd =_gcd ;}else {if _d .Abs (float64 (_cbgb -_eeg ))> 3{_ebea ,_faf ,_cdd =_cga (_egb [_cbfb ],_ebea ,_faf ,_cdd ,_eeg );}else {_ebea ,_faf =_cgd (_ebea ,_faf ,_eeg ,_cbgb );_cdd =_eeg ;};};};_abd =_bgae .appendEncodedRow (_abd ,_ebea ,_dagf );if _bgae .EncodedByteAlign {_faf =0;
};_dagf =_faf %8;};if _bgae .EndOfBlock {_faab ,_ :=_gaeg (_dagf );_abd =_bgae .appendEncodedRow (_abd ,_faab ,_dagf );};return _abd ;};func (_ecga *tree )fillWithNode (_cafg ,_gaec int ,_cgfg *treeNode )error {_aef :=_ecga ._acd ;for _afe :=0;_afe < _cafg ;
_afe ++{_fbg :=uint (_cafg -1-_afe );_bfa :=((_gaec >>_fbg )&1)!=0;_aabf :=_aef .walk (_bfa );if _aabf !=nil {if _aabf ._fdg {return _g .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_aef =_aabf ;continue ;};if _afe ==_cafg -1{_aabf =_cgfg ;}else {_aabf =&treeNode {};};if _gaec ==0{_aabf ._cfae =true ;};_aef .set (_bfa ,_aabf );_aef =_aabf ;};return nil ;};func _cef (_dgf ,_fef []byte ,_gag int )int {_dfcf :=_ggdf (_fef ,_gag );if _dfcf < len (_fef )&&(_gag ==-1&&_fef [_dfcf ]==_bda ||_gag >=0&&_gag < len (_dgf )&&_dgf [_gag ]==_fef [_dfcf ]||_gag >=len (_dgf )&&_dgf [_gag -1]!=_fef [_dfcf ]){_dfcf =_ggdf (_fef ,_dfcf );
};return _dfcf ;};func (_cfd *Decoder )decodeRowType6 ()error {if _cfd ._gfb {_cfd ._cdc .Align ();};if _cfd ._ead {_cfd ._cdc .Mark ();_aaef ,_agff :=_cfd .tryFetchEOL ();if _agff !=nil {return _agff ;};if _aaef {_aaef ,_agff =_cfd .tryFetchEOL ();if _agff !=nil {return _agff ;
};if _aaef {return _ef .EOF ;};};_cfd ._cdc .Reset ();};return _cfd .decode2D ();};func _cga (_agfg ,_bgf []byte ,_dcda ,_ade ,_eebc int )([]byte ,int ,int ){_dda :=_ggdf (_agfg ,_eebc );_ecag :=_ade >=0&&_agfg [_ade ]==_bda ||_ade ==-1;_bgf ,_dcda =_dee (_bgf ,_dcda ,_fbe );
var _cda int ;if _ade > -1{_cda =_eebc -_ade ;}else {_cda =_eebc -_ade -1;};_bgf ,_dcda =_ggd (_bgf ,_dcda ,_cda ,_ecag );_ecag =!_ecag ;_gac :=_dda -_eebc ;_bgf ,_dcda =_ggd (_bgf ,_dcda ,_gac ,_ecag );_ade =_dda ;return _bgf ,_dcda ,_ade ;};func (_ged tiffType )String ()string {switch _ged {case _dce :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _bdg :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _aae :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func (_aaca *Encoder )appendEncodedRow (_dacf ,_fae []byte ,_ffge int )[]byte {if len (_dacf )> 0&&_ffge !=0&&!_aaca .EncodedByteAlign {_dacf [len (_dacf )-1]=_dacf [len (_dacf )-1]|_fae [0];
_dacf =append (_dacf ,_fae [1:]...);}else {_dacf =append (_dacf ,_fae ...);};return _dacf ;};func _fdd (_fcg ,_gfc []byte ,_eed int ,_cfce bool )int {_eadf :=_ggdf (_gfc ,_eed );if _eadf < len (_gfc )&&(_eed ==-1&&_gfc [_eadf ]==_bda ||_eed >=0&&_eed < len (_fcg )&&_fcg [_eed ]==_gfc [_eadf ]||_eed >=len (_fcg )&&_cfce &&_gfc [_eadf ]==_bda ||_eed >=len (_fcg )&&!_cfce &&_gfc [_eadf ]==_gge ){_eadf =_ggdf (_gfc ,_eadf );
};return _eadf ;};func _cec (_cefa []byte ,_eec int )([]byte ,int ){return _dee (_cefa ,_eec ,_fb )};func _aage (_bdgc int ,_daff bool )(code ,int ,bool ){if _bdgc < 64{if _daff {return _aa [_bdgc ],0,true ;};return _bcg [_bdgc ],0,true ;};_afa :=_bdgc /64;
if _afa > 40{return _ed [2560],_bdgc -2560,false ;};if _afa > 27{return _ed [_afa *64],_bdgc -_afa *64,false ;};if _daff {return _bg [_afa *64],_bdgc -_afa *64,false ;};return _dge [_afa *64],_bdgc -_afa *64,false ;};func (_deg *Encoder )encodeG31D (_aab [][]byte )[]byte {var _aag []byte ;
_aeg :=0;for _bce :=range _aab {if _deg .Rows > 0&&!_deg .EndOfBlock &&_bce ==_deg .Rows {break ;};_dag ,_abb :=_aedf (_aab [_bce ],_aeg ,_ca );_aag =_deg .appendEncodedRow (_aag ,_dag ,_aeg );if _deg .EncodedByteAlign {_abb =0;};_aeg =_abb ;};if _deg .EndOfBlock {_fage ,_ :=_bfd (_aeg );
_aag =_deg .appendEncodedRow (_aag ,_fage ,_aeg );};return _aag ;};func (_ecg *Decoder )tryFetchRTC2D ()(_dceg error ){_ecg ._cdc .Mark ();var _ffcc bool ;for _gbg :=0;_gbg < 5;_gbg ++{_ffcc ,_dceg =_ecg .tryFetchEOL1 ();if _dceg !=nil {if _g .Is (_dceg ,_ef .EOF ){if _gbg ==0{break ;
};return _be ;};};if _ffcc {continue ;};if _gbg > 0{return _be ;};break ;};if _ffcc {return _ef .EOF ;};_ecg ._cdc .Reset ();return _dceg ;};func _cgd (_cbc []byte ,_adg ,_fbf ,_cgf int )([]byte ,int ){_fbb :=_efac (_fbf ,_cgf );_cbc ,_adg =_dee (_cbc ,_adg ,_fbb );
return _cbc ,_adg ;};func _ggd (_beg []byte ,_bafa int ,_egef int ,_caff bool )([]byte ,int ){var (_bbgc code ;_bca bool ;);for !_bca {_bbgc ,_egef ,_bca =_aage (_egef ,_caff );_beg ,_bafa =_dee (_beg ,_bafa ,_bbgc );};return _beg ,_bafa ;};func _bbcf (_geda [][]byte )[][]byte {_fcb :=make ([]byte ,len (_geda [0]));
for _fcbc :=range _fcb {_fcb [_fcbc ]=_bda ;};_geda =append (_geda ,[]byte {});for _dbdf :=len (_geda )-1;_dbdf > 0;_dbdf --{_geda [_dbdf ]=_geda [_dbdf -1];};_geda [0]=_fcb ;return _geda ;};func _dee (_ecfd []byte ,_bae int ,_cgg code )([]byte ,int ){_egcd :=0;
for _egcd < _cgg .BitsWritten {_gbf :=_bae /8;_adc :=_bae %8;if _gbf >=len (_ecfd ){_ecfd =append (_ecfd ,0);};_gaf :=8-_adc ;_abf :=_cgg .BitsWritten -_egcd ;if _gaf > _abf {_gaf =_abf ;};if _egcd < 8{_ecfd [_gbf ]=_ecfd [_gbf ]|byte (_cgg .Code >>uint (8+_adc -_egcd ))&_ffg [8-_gaf -_adc ];
}else {_ecfd [_gbf ]=_ecfd [_gbf ]|(byte (_cgg .Code <<uint (_egcd -8))&_ffg [8-_gaf ])>>uint (_adc );};_bae +=_gaf ;_egcd +=_gaf ;};return _ecfd ,_bae ;};func (_geb *Decoder )decoderRowType41D ()error {if _geb ._gfb {_geb ._cdc .Align ();};_geb ._cdc .Mark ();
var (_cgb bool ;_dde error ;);if _geb ._fc {_cgb ,_dde =_geb .tryFetchEOL ();if _dde !=nil {return _dde ;};if !_cgb {return _fd ;};}else {_cgb ,_dde =_geb .looseFetchEOL ();if _dde !=nil {return _dde ;};};if !_cgb {_geb ._cdc .Reset ();};if _cgb &&_geb ._ead {_geb ._cdc .Mark ();
for _cbea :=0;_cbea < 5;_cbea ++{_cgb ,_dde =_geb .tryFetchEOL ();if _dde !=nil {if _g .Is (_dde ,_ef .EOF ){if _cbea ==0{break ;};return _be ;};};if _cgb {continue ;};if _cbea > 0{return _be ;};break ;};if _cgb {return _ef .EOF ;};_geb ._cdc .Reset ();
};if _dde =_geb .decode1D ();_dde !=nil {return _dde ;};return nil ;};func _efac (_fed ,_dgab int )code {var _bggf code ;switch _dgab -_fed {case -1:_bggf =_fgg ;case -2:_bggf =_egg ;case -3:_bggf =_bf ;case 0:_bggf =_ffc ;case 1:_bggf =_caf ;case 2:_bggf =_eab ;
case 3:_bggf =_afb ;};return _bggf ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_gae :=&Decoder {_cdc :_b .NewReader (data ),_ec :options .Columns ,_bgc :options .Rows ,_bgcb :options .DamagedRowsBeforeError ,_ega :make ([]byte ,(options .Columns +7)/8),_bed :make ([]int ,options .Columns +2),_de :make ([]int ,options .Columns +2),_gfb :options .EncodedByteAligned ,_cff :options .BlackIsOne ,_fc :options .EndOfLine ,_ead :options .EndOfBlock };
switch {case options .K ==0:_gae ._da =_bdg ;if len (data )< 20{return nil ,_g .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_efb :=data [:20];if _efb [0]!=0||(_efb [1]>>4!=1&&_efb [1]!=1){_gae ._da =_dce ;
_ce :=(uint16 (_efb [0])<<8+uint16 (_efb [1]&0xff))>>4;for _eda :=12;_eda < 160;_eda ++{_ce =(_ce <<1)+uint16 ((_efb [_eda /8]>>uint16 (7-(_eda %8)))&0x01);if _ce &0xfff==1{_gae ._da =_bdg ;break ;};};};case options .K < 0:_gae ._da =_aae ;case options .K > 0:_gae ._da =_bdg ;
_gae ._ab =true ;};switch _gae ._da {case _dce ,_bdg ,_aae :default:return nil ,_g .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _gae ,nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func (_cde *Decoder )fetch ()error {if _cde ._geg ==-1{return nil ;};
if _cde ._cgc < _cde ._geg {return nil ;};_cde ._geg =0;_cbe :=_cde .decodeRow ();if _cbe !=nil {if !_g .Is (_cbe ,_ef .EOF ){return _cbe ;};if _cde ._geg !=0{return _cbe ;};_cde ._geg =-1;};_cde ._cgc =0;return nil ;};var _cc =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func (_dff *Encoder )Encode (pixels [][]byte )[]byte {if _dff .BlackIs1 {_bda =0;_gge =1;}else {_bda =1;_gge =0;};if _dff .K ==0{return _dff .encodeG31D (pixels );};if _dff .K > 0{return _dff .encodeG32D (pixels );};if _dff .K < 0{return _dff .encodeG4 (pixels );
};return nil ;};