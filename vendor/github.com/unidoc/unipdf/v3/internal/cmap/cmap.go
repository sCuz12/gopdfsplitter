//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ba "bufio";_bd "bytes";_c "encoding/hex";_d "errors";_e "fmt";_dc "github.com/unidoc/unipdf/v3/common";_ged "github.com/unidoc/unipdf/v3/core";_gg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_ge "io";_gf "sort";_a "strconv";
_ca "strings";_b "unicode/utf16";);func (cmap *CMap )toBfData ()string {if len (cmap ._cdc )==0{return "";};_eefa :=make ([]CharCode ,0,len (cmap ._cdc ));for _fgf :=range cmap ._cdc {_eefa =append (_eefa ,_fgf );};_gf .Slice (_eefa ,func (_ccb ,_bdd int )bool {return _eefa [_ccb ]< _eefa [_bdd ]});
var _ggb []charRange ;_fbgc :=charRange {_eefa [0],_eefa [0]};_cag :=cmap ._cdc [_eefa [0]];for _ ,_cdcf :=range _eefa [1:]{_ae :=cmap ._cdc [_cdcf ];if _cdcf ==_fbgc ._ef +1&&_ebf (_ae )==_ebf (_cag )+1{_fbgc ._ef =_cdcf ;}else {_ggb =append (_ggb ,_fbgc );
_fbgc ._ea ,_fbgc ._ef =_cdcf ,_cdcf ;};_cag =_ae ;};_ggb =append (_ggb ,_fbgc );var _egf []CharCode ;var _fgg []fbRange ;for _ ,_aac :=range _ggb {if _aac ._ea ==_aac ._ef {_egf =append (_egf ,_aac ._ea );}else {_fgg =append (_fgg ,fbRange {_ab :_aac ._ea ,_bda :_aac ._ef ,_bf :cmap ._cdc [_aac ._ea ]});
};};_dc .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_ggb ),len (_egf ),len (_fgg ));var _bbf []string ;if len (_egf )> 0{_gcd :=(len (_egf )+_aed -1)/_aed ;
for _gcdd :=0;_gcdd < _gcd ;_gcdd ++{_acfb :=_abaf (len (_egf )-_gcdd *_aed ,_aed );_bbf =append (_bbf ,_e .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_acfb ));for _fadf :=0;_fadf < _acfb ;_fadf ++{_cacd :=_egf [_gcdd *_aed +_fadf ];
_ede :=cmap ._cdc [_cacd ];_bbf =append (_bbf ,_e .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_cacd ,_bdda (_ede )));};_bbf =append (_bbf ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_fgg )> 0{_dcg :=(len (_fgg )+_aed -1)/_aed ;
for _acb :=0;_acb < _dcg ;_acb ++{_eagg :=_abaf (len (_fgg )-_acb *_aed ,_aed );_bbf =append (_bbf ,_e .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_eagg ));for _dgdeb :=0;_dgdeb < _eagg ;_dgdeb ++{_caa :=_fgg [_acb *_aed +_dgdeb ];
_bbf =append (_bbf ,_e .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_caa ._ab ,_caa ._bda ,_bdda (_caa ._bf )));};_bbf =append (_bbf ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _ca .Join (_bbf ,"\u000a");
};func (cmap *CMap )Type ()int {return cmap ._cf };func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_bce ,_bbc :=cmap .BytesToCharcodes (data );if !_bbc {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_gbb :=make ([]string ,len (_bce ));var _deb []CharCode ;for _ade ,_efa :=range _bce {_efc ,_cff :=cmap ._cdc [_efa ];if !_cff {_deb =append (_deb ,_efa );_efc =MissingCodeString ;};_gbb [_ade ]=_efc ;};_gbd :=_ca .Join (_gbb ,"");if len (_deb )> 0{_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_bce ,len (_deb ),_deb ,_gbd ,cmap );
};return _gbd ,len (_deb );};func (cmap *CMap )String ()string {_abd :=cmap ._ff ;_ccc :=[]string {_e .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._ga ),_e .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._cf )};if cmap ._db !=""{_ccc =append (_ccc ,_e .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._db ));
};if cmap ._cd !=""{_ccc =append (_ccc ,_e .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._cd ));};_ccc =append (_ccc ,_e .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_abd .String ()));
if len (cmap ._cb )> 0{_ccc =append (_ccc ,_e .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cb )));};if len (cmap ._cdc )> 0{_ccc =append (_ccc ,_e .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._cdc )));
};return _e .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ec ,_ca .Join (_ccc ,"\u0020"));};type cmapString struct{String string ;};const (_aed =100;_cgc ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_edc ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);type CMap struct{*cMapParser ;_ec string ;_ga int ;_cf int ;_db string ;_cd string ;_ff CIDSystemInfo ;_cb []Codespace ;_fa map[CharCode ]CharCode ;_cc map[CharCode ]CharCode ;_cdc map[CharCode ]string ;_ecc map[string ]CharCode ;_cgf []byte ;_fd *_ged .PdfObjectStream ;
_dgd integer ;};func (cmap *CMap )parseType ()error {_cdcd :=0;_ccfd :=false ;for _gfg :=0;_gfg < 3&&!_ccfd ;_gfg ++{_dfg ,_dee :=cmap .parseObject ();if _dee !=nil {return _dee ;};switch _gfa :=_dfg .(type ){case cmapOperand :switch _gfa .Operand {case "\u0064\u0065\u0066":_ccfd =true ;
default:_dc .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_dfg );return ErrBadCMap ;};case cmapInt :_cdcd =int (_gfa ._gaff );
};};cmap ._cf =_cdcd ;return nil ;};func (_fae *cMapParser )parseOperand ()(cmapOperand ,error ){_baff :=cmapOperand {};_eeff :=_bd .Buffer {};for {_ddgc ,_cddc :=_fae ._afae .Peek (1);if _cddc !=nil {if _cddc ==_ge .EOF {break ;};return _baff ,_cddc ;
};if _ged .IsDelimiter (_ddgc [0]){break ;};if _ged .IsWhiteSpace (_ddgc [0]){break ;};_bccd ,_ :=_fae ._afae .ReadByte ();_eeff .WriteByte (_bccd );};if _eeff .Len ()==0{return _baff ,_e .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_baff .Operand =_eeff .String ();return _baff ,nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_bb :=_eag (name );if _bb !=nil {return nil ,_bb ;};if cmap ._cd ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_ce ,_bb :=_eag (cmap ._cd );
if _bb !=nil {return nil ,_bb ;};for _bc ,_ecd :=range _ce ._fa {if _ ,_ee :=cmap ._fa [_bc ];!_ee {cmap ._fa [_bc ]=_ecd ;};};cmap ._cb =append (cmap ._cb ,_ce ._cb ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseCIDRange ()error {for {_gce ,_cdf :=cmap .parseObject ();
if _cdf !=nil {if _cdf ==_ge .EOF {break ;};return _cdf ;};_dab ,_dbd :=_gce .(cmapHexString );if !_dbd {if _ecda ,_fec :=_gce .(cmapOperand );_fec {if _ecda .Operand ==_feec {return nil ;};return _d .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_ffa :=_adba (_dab );_gce ,_cdf =cmap .parseObject ();if _cdf !=nil {if _cdf ==_ge .EOF {break ;};return _cdf ;};_cef ,_dbd :=_gce .(cmapHexString );if !_dbd {return _d .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_dab ._cae )!=len (_cef ._cae ){return _d .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_eeaf :=_adba (_cef );
if _ffa > _eeaf {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_ffa ,_eeaf );
return ErrBadCMap ;};_gce ,_cdf =cmap .parseObject ();if _cdf !=nil {if _cdf ==_ge .EOF {break ;};return _cdf ;};_ffc ,_dbd :=_gce .(cmapInt );if !_dbd {return _d .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _ffc ._gaff < 0{return _d .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_fcg :=_ffc ._gaff ;for _cdfc :=_ffa ;_cdfc <=_eeaf ;_cdfc ++{cmap ._fa [_cdfc ]=CharCode (_fcg );
_fcg ++;};_dc .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_ffa ,_eeaf ,_ffc ._gaff );};return nil ;};func _acd ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};
func (cmap *CMap )WMode ()(int ,bool ){return cmap ._dgd ._fed ,cmap ._dgd ._ggd };func (_agc *cMapParser )parseHexString ()(cmapHexString ,error ){_agc ._afae .ReadByte ();_dge :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_fce :=_bd .Buffer {};for {_agc .skipSpaces ();_fag ,_acga :=_agc ._afae .Peek (1);if _acga !=nil {return cmapHexString {},_acga ;};if _fag [0]=='>'{_agc ._afae .ReadByte ();break ;};_abbc ,_ :=_agc ._afae .ReadByte ();if _bd .IndexByte (_dge ,_abbc )>=0{_fce .WriteByte (_abbc );
};};if _fce .Len ()%2==1{_dc .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fce .String ());_fce .WriteByte ('0');};_beed :=_fce .Len ()/2;
_fab ,_ :=_c .DecodeString (_fce .String ());return cmapHexString {_gef :_beed ,_cae :_fab },nil ;};func (cmap *CMap )computeInverseMappings (){for _gbe ,_be :=range cmap ._fa {if _dd ,_dgde :=cmap ._cc [_be ];!_dgde ||(_dgde &&_dd > _gbe ){cmap ._cc [_be ]=_gbe ;
};};for _aba ,_dgg :=range cmap ._cdc {if _cba ,_aaa :=cmap ._ecc [_dgg ];!_aaa ||(_aaa &&_cba > _aba ){cmap ._ecc [_dgg ]=_aba ;};};_gf .Slice (cmap ._cb ,func (_bcf ,_cgd int )bool {return cmap ._cb [_bcf ].Low < cmap ._cb [_cgd ].Low });};func (cmap *CMap )matchCode (_dgda []byte )(_ebc CharCode ,_fg int ,_ecb bool ){for _egc :=0;
_egc < _f ;_egc ++{if _egc < len (_dgda ){_ebc =_ebc <<8|CharCode (_dgda [_egc ]);_fg ++;};_ecb =cmap .inCodespace (_ebc ,_egc +1);if _ecb {return _ebc ,_fg ,true ;};};_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dgda ,string (_dgda ),cmap );
return 0,0,false ;};func (cmap *CMap )parseBfchar ()error {for {_egeb ,_gaf :=cmap .parseObject ();if _gaf !=nil {if _gaf ==_ge .EOF {break ;};return _gaf ;};var _dfdb CharCode ;switch _gcc :=_egeb .(type ){case cmapOperand :if _gcc .Operand ==_bbfd {return nil ;
};return _d .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_dfdb =_adba (_gcc );default:return _d .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_egeb ,_gaf =cmap .parseObject ();if _gaf !=nil {if _gaf ==_ge .EOF {break ;};return _gaf ;};var _cga []rune ;switch _bga :=_egeb .(type ){case cmapOperand :if _bga .Operand ==_bbfd {return nil ;};_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_bga );
return ErrBadCMap ;case cmapHexString :_cga =_gcb (_bga );case cmapName :_dc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_bga );_cga =[]rune {MissingCodeRune };
default:_dc .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_egeb );return ErrBadCMap ;};cmap ._cdc [_dfdb ]=string (_cga );};return nil ;};func (cmap *CMap )parseBfrange ()error {for {var _dagg CharCode ;
_fcgc ,_gde :=cmap .parseObject ();if _gde !=nil {if _gde ==_ge .EOF {break ;};return _gde ;};switch _gfeb :=_fcgc .(type ){case cmapOperand :if _gfeb .Operand ==_dda {return nil ;};return _d .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_dagg =_adba (_gfeb );default:return _d .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _cgdd CharCode ;_fcgc ,_gde =cmap .parseObject ();if _gde !=nil {if _gde ==_ge .EOF {break ;};return _gde ;
};switch _fccg :=_fcgc .(type ){case cmapOperand :_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_cgdd =_adba (_fccg );if _cgdd > 0xffff{_cgdd =0xffff;};default:_dc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_fcgc );return ErrBadCMap ;
};_fcgc ,_gde =cmap .parseObject ();if _gde !=nil {if _gde ==_ge .EOF {break ;};return _gde ;};switch _egef :=_fcgc .(type ){case cmapArray :if len (_egef .Array )!=int (_cgdd -_dagg )+1{_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _fge :=_dagg ;_fge <=_cgdd ;_fge ++{_dgge :=_egef .Array [_fge -_dagg ];_aaef ,_deg :=_dgge .(cmapHexString );if !_deg {return _d .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_acfa :=_gcb (_aaef );cmap ._cdc [_fge ]=string (_acfa );};case cmapHexString :_bggc :=_gcb (_egef );_bddd :=len (_bggc );for _gbcb :=_dagg ;_gbcb <=_cgdd ;_gbcb ++{cmap ._cdc [_gbcb ]=string (_bggc );if _bddd > 0{_bggc [_bddd -1]++;}else {_dc .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_gbcb );
};if _gbcb ==1<<32-1{break ;};};default:_dc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_fcgc );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _df []CharCode ;
if cmap ._ga ==8{for _ ,_ded :=range data {_df =append (_df ,CharCode (_ded ));};return _df ,true ;};for _acf :=0;_acf < len (data );{_fad ,_ffb ,_ege :=cmap .matchCode (data [_acf :]);if !_ege {_dc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_acf ,data ,string (data ));
return _df ,false ;};_df =append (_df ,_fad );_acf +=_ffb ;};return _df ,true ;};type cmapDict struct{Dict map[string ]cmapObject ;};type cMapParser struct{_afae *_ba .Reader };func (_fded *cMapParser )parseDict ()(cmapDict ,error ){_dc .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_bgae :=_acd ();_ggg ,_ :=_fded ._afae .ReadByte ();if _ggg !='<'{return _bgae ,ErrBadCMapDict ;};_ggg ,_ =_fded ._afae .ReadByte ();if _ggg !='<'{return _bgae ,ErrBadCMapDict ;};for {_fded .skipSpaces ();_gda ,_bead :=_fded ._afae .Peek (2);if _bead !=nil {return _bgae ,_bead ;
};if (_gda [0]=='>')&&(_gda [1]=='>'){_fded ._afae .ReadByte ();_fded ._afae .ReadByte ();break ;};_ecec ,_bead :=_fded .parseName ();_dc .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_ecec .Name );if _bead !=nil {_dc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_bead );
return _bgae ,_bead ;};_fded .skipSpaces ();_caf ,_bead :=_fded .parseObject ();if _bead !=nil {return _bgae ,_bead ;};_bgae .Dict [_ecec .Name ]=_caf ;_fded .skipSpaces ();_gda ,_bead =_fded ._afae .Peek (3);if _bead !=nil {return _bgae ,_bead ;};if string (_gda )=="\u0064\u0065\u0066"{_fded ._afae .Discard (3);
};};return _bgae ,nil ;};const (_abf ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_agd ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gaa ="\u0065n\u0064\u0063\u006d\u0061\u0070";_fgee ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";
_gbefd ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_geg ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_bbfd ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_fda ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_dda ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bcb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_feec ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_fbfb ="\u0075s\u0065\u0063\u006d\u0061\u0070";
_bde ="\u0057\u004d\u006fd\u0065";_dbe ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_dfge ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_cfg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )Stream ()(*_ged .PdfObjectStream ,error ){if cmap ._fd !=nil {return cmap ._fd ,nil ;
};_eb ,_bba :=_ged .MakeStream (cmap .Bytes (),_ged .NewFlateEncoder ());if _bba !=nil {return nil ,_bba ;};cmap ._fd =_eb ;return cmap ._fd ,nil ;};func (_eaac *cMapParser )parseArray ()(cmapArray ,error ){_abbd :=cmapArray {};_abbd .Array =[]cmapObject {};
_eaac ._afae .ReadByte ();for {_eaac .skipSpaces ();_fcfa ,_bdef :=_eaac ._afae .Peek (1);if _bdef !=nil {return _abbd ,_bdef ;};if _fcfa [0]==']'{_eaac ._afae .ReadByte ();break ;};_fgeb ,_bdef :=_eaac .parseObject ();if _bdef !=nil {return _abbd ,_bdef ;
};_abbd .Array =append (_abbd .Array ,_fgeb );};return _abbd ,nil ;};func (cmap *CMap )parse ()error {var _bcfc cmapObject ;for {_gee ,_aef :=cmap .parseObject ();if _aef !=nil {if _aef ==_ge .EOF {break ;};_dc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_aef );
return _aef ;};switch _eec :=_gee .(type ){case cmapOperand :_gbeb :=_eec ;switch _gbeb .Operand {case _fgee :_abb :=cmap .parseCodespaceRange ();if _abb !=nil {return _abb ;};case _bcb :_egd :=cmap .parseCIDRange ();if _egd !=nil {return _egd ;};case _geg :_fbd :=cmap .parseBfchar ();
if _fbd !=nil {return _fbd ;};case _fda :_fbab :=cmap .parseBfrange ();if _fbab !=nil {return _fbab ;};case _fbfb :if _bcfc ==nil {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_feb ,_fde :=_bcfc .(cmapName );if !_fde {_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_bcfc );
return ErrBadCMap ;};cmap ._cd =_feb .Name ;case _abf :_ebb :=cmap .parseSystemInfo ();if _ebb !=nil {return _ebb ;};};case cmapName :_agf :=_eec ;switch _agf .Name {case _abf :_ebe :=cmap .parseSystemInfo ();if _ebe !=nil {return _ebe ;};case _dbe :_cccg :=cmap .parseName ();
if _cccg !=nil {return _cccg ;};case _dfge :_cde :=cmap .parseType ();if _cde !=nil {return _cde ;};case _cfg :_ddd :=cmap .parseVersion ();if _ddd !=nil {return _ddd ;};case _bde :if _aef =cmap .parseWMode ();_aef !=nil {return _aef ;};};};_bcfc =_gee ;
};return nil ;};func (_fac *cMapParser )parseObject ()(cmapObject ,error ){_fac .skipSpaces ();for {_eead ,_gfgc :=_fac ._afae .Peek (2);if _gfgc !=nil {return nil ,_gfgc ;};if _eead [0]=='%'{_fac .parseComment ();_fac .skipSpaces ();continue ;}else if _eead [0]=='/'{_bcfcf ,_bedg :=_fac .parseName ();
return _bcfcf ,_bedg ;}else if _eead [0]=='('{_eceb ,_edbg :=_fac .parseString ();return _eceb ,_edbg ;}else if _eead [0]=='['{_efg ,_aab :=_fac .parseArray ();return _efg ,_aab ;}else if (_eead [0]=='<')&&(_eead [1]=='<'){_beb ,_cgca :=_fac .parseDict ();
return _beb ,_cgca ;}else if _eead [0]=='<'{_gab ,_bdfe :=_fac .parseHexString ();return _gab ,_bdfe ;}else if _ged .IsDecimalDigit (_eead [0])||(_eead [0]=='-'&&_ged .IsDecimalDigit (_eead [1])){_caab ,_gcg :=_fac .parseNumber ();if _gcg !=nil {return nil ,_gcg ;
};return _caab ,nil ;}else {_cfcd ,_gaae :=_fac .parseOperand ();if _gaae !=nil {return nil ,_gaae ;};return _cfcd ,nil ;};};};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};var (ErrBadCMap =_d .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_d .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_d .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func _eag (_adb string )(*CMap ,error ){_dcd ,_fbf :=_gg .Asset (_adb );if _fbf !=nil {return nil ,_fbf ;};return LoadCmapFromDataCID (_dcd );};func (_cdac *cMapParser )parseName ()(cmapName ,error ){_cdff :="";_adfc :=false ;for {_gbce ,_cbaf :=_cdac ._afae .Peek (1);
if _cbaf ==_ge .EOF {break ;};if _cbaf !=nil {return cmapName {_cdff },_cbaf ;};if !_adfc {if _gbce [0]=='/'{_adfc =true ;_cdac ._afae .ReadByte ();}else {_dc .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_gbce ,_gbce );
return cmapName {_cdff },_e .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_gbce [0]);};}else {if _ged .IsWhiteSpace (_gbce [0]){break ;}else if (_gbce [0]=='/')||(_gbce [0]=='[')||(_gbce [0]=='(')||(_gbce [0]==']')||(_gbce [0]=='<')||(_gbce [0]=='>'){break ;
}else if _gbce [0]=='#'{_gfd ,_dccd :=_cdac ._afae .Peek (3);if _dccd !=nil {return cmapName {_cdff },_dccd ;};_cdac ._afae .Discard (3);_gfb ,_dccd :=_c .DecodeString (string (_gfd [1:3]));if _dccd !=nil {return cmapName {_cdff },_dccd ;};_cdff +=string (_gfb );
}else {_gcgb ,_ :=_cdac ._afae .ReadByte ();_cdff +=string (_gcgb );};};};return cmapName {_cdff },nil ;};func _ebf (_egb string )rune {_efaf :=[]rune (_egb );return _efaf [len (_efaf )-1]};func (_aa *CIDSystemInfo )String ()string {return _e .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_aa .Registry ,_aa .Ordering ,_aa .Supplement );
};func _gb (_fba bool )*CMap {_agg :=16;if _fba {_agg =8;};return &CMap {_ga :_agg ,_fa :make (map[CharCode ]CharCode ),_cc :make (map[CharCode ]CharCode ),_cdc :make (map[CharCode ]string ),_ecc :make (map[string ]CharCode )};};func IsPredefinedCMap (name string )bool {return _gg .AssetExists (name )};
func _cge (_faba cmapHexString )rune {_becc :=_gcb (_faba );if _aadb :=len (_becc );_aadb ==0{_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_faba );
return MissingCodeRune ;};if len (_becc )> 1{_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_faba ,_becc );
};return _becc [0];};type CharCode uint32 ;func (cmap *CMap )parseSystemInfo ()error {_aga :=false ;_fbc :=false ;_ega :="";_afa :=false ;_bdf :=CIDSystemInfo {};for _bfg :=0;_bfg < 50&&!_afa ;_bfg ++{_adbc ,_fdb :=cmap .parseObject ();if _fdb !=nil {return _fdb ;
};switch _ddg :=_adbc .(type ){case cmapDict :_ceg :=_ddg .Dict ;_afd ,_befa :=_ceg ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_befa {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_dac ,_befa :=_afd .(cmapString );if !_befa {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bdf .Registry =_dac .String ;
_afd ,_befa =_ceg ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_befa {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_dac ,_befa =_afd .(cmapString );
if !_befa {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bdf .Ordering =_dac .String ;_cfc ,_befa :=_ceg ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];
if !_befa {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_afc ,_befa :=_cfc .(cmapInt );if !_befa {_dc .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bdf .Supplement =int (_afc ._gaff );_afa =true ;case cmapOperand :switch _ddg .Operand {case "\u0062\u0065\u0067i\u006e":_aga =true ;case "\u0065\u006e\u0064":_afa =true ;case "\u0064\u0065\u0066":_fbc =false ;};case cmapName :if _aga {_ega =_ddg .Name ;
_fbc =true ;};case cmapString :if _fbc {switch _ega {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_bdf .Registry =_ddg .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_bdf .Ordering =_ddg .String ;};};case cmapInt :if _fbc {switch _ega {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_bdf .Supplement =int (_ddg ._gaff );
};};};};if !_afa {_dc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._ff =_bdf ;return nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_dc .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_gb (isSimple );cmap .cMapParser =_age (data );_ad :=cmap .parse ();if _ad !=nil {return nil ,_ad ;};if len (cmap ._cb )==0{if cmap ._cd !=""{return cmap ,nil ;};_dc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};type cmapName struct{Name string ;};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._ff };type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};type cmapArray struct{Array []cmapObject ;
};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _ace ,_gbbg :=cmap ._cdc [code ];_gbbg {return _ace ,true ;};return MissingCodeString ,false ;};func (_adfd *cMapParser )parseString ()(cmapString ,error ){_adfd ._afae .ReadByte ();
_eaf :=_bd .Buffer {};_cgcc :=1;for {_bbe ,_gca :=_adfd ._afae .Peek (1);if _gca !=nil {return cmapString {_eaf .String ()},_gca ;};if _bbe [0]=='\\'{_adfd ._afae .ReadByte ();_cfcdg ,_dbgc :=_adfd ._afae .ReadByte ();if _dbgc !=nil {return cmapString {_eaf .String ()},_dbgc ;
};if _ged .IsOctalDigit (_cfcdg ){_bcbf ,_bea :=_adfd ._afae .Peek (2);if _bea !=nil {return cmapString {_eaf .String ()},_bea ;};var _fdec []byte ;_fdec =append (_fdec ,_cfcdg );for _ ,_cfga :=range _bcbf {if _ged .IsOctalDigit (_cfga ){_fdec =append (_fdec ,_cfga );
}else {break ;};};_adfd ._afae .Discard (len (_fdec )-1);_dc .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fdec );_dcf ,_bea :=_a .ParseUint (string (_fdec ),8,32);if _bea !=nil {return cmapString {_eaf .String ()},_bea ;
};_eaf .WriteByte (byte (_dcf ));continue ;};switch _cfcdg {case 'n':_eaf .WriteByte ('\n');case 'r':_eaf .WriteByte ('\r');case 't':_eaf .WriteByte ('\t');case 'b':_eaf .WriteByte ('\b');case 'f':_eaf .WriteByte ('\f');case '(':_eaf .WriteByte ('(');case ')':_eaf .WriteByte (')');
case '\\':_eaf .WriteByte ('\\');};continue ;}else if _bbe [0]=='('{_cgcc ++;}else if _bbe [0]==')'{_cgcc --;if _cgcc ==0{_adfd ._afae .ReadByte ();break ;};};_ffca ,_ :=_adfd ._afae .ReadByte ();_eaf .WriteByte (_ffca );};return cmapString {_eaf .String ()},nil ;
};func NewCIDSystemInfo (obj _ged .PdfObject )(_ag CIDSystemInfo ,_cg error ){_fb ,_bfe :=_ged .GetDict (obj );if !_bfe {return CIDSystemInfo {},_ged .ErrTypeError ;};_dg ,_bfe :=_ged .GetStringVal (_fb .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));
if !_bfe {return CIDSystemInfo {},_ged .ErrTypeError ;};_ggc ,_bfe :=_ged .GetStringVal (_fb .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_bfe {return CIDSystemInfo {},_ged .ErrTypeError ;};_de ,_bfe :=_ged .GetIntVal (_fb .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));
if !_bfe {return CIDSystemInfo {},_ged .ErrTypeError ;};return CIDSystemInfo {Registry :_dg ,Ordering :_ggc ,Supplement :_de },nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ac :=make (map[CharCode ]string ,len (codeToRune ));for _ece ,_bdae :=range codeToRune {_ac [_ece ]=string (_bdae );
};cmap :=&CMap {_ec :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_cf :2,_ga :16,_ff :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cb :[]Codespace {{Low :0,High :0xffff}},_cdc :_ac ,_ecc :make (map[string ]CharCode ,len (codeToRune )),_fa :make (map[CharCode ]CharCode ,len (codeToRune )),_cc :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )parseVersion ()error {_fbfc :="";_bccg :=false ;for _bfa :=0;_bfa < 3&&!_bccg ;_bfa ++{_bed ,_fcf :=cmap .parseObject ();if _fcf !=nil {return _fcf ;};switch _efe :=_bed .(type ){case cmapOperand :switch _efe .Operand {case "\u0064\u0065\u0066":_bccg =true ;
default:_dc .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_bed );
return ErrBadCMap ;};case cmapInt :_fbfc =_e .Sprintf ("\u0025\u0064",_efe ._gaff );case cmapFloat :_fbfc =_e .Sprintf ("\u0025\u0066",_efe ._beeb );case cmapString :_fbfc =_efe .String ;default:_dc .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_bed );
};};cmap ._db =_fbfc ;return nil ;};func _adba (_bcec cmapHexString )CharCode {_bff :=CharCode (0);for _ ,_eab :=range _bcec ._cae {_bff <<=8;_bff |=CharCode (_eab );};return _bff ;};func (cmap *CMap )Name ()string {return cmap ._ec };const (_f =4;MissingCodeRune ='\ufffd';
MissingCodeString =string (MissingCodeRune ););type cmapFloat struct{_beeb float64 };type cmapHexString struct{_gef int ;_cae []byte ;};func _abaf (_aaae ,_gcba int )int {if _aaae < _gcba {return _aaae ;};return _gcba ;};type integer struct{_ggd bool ;
_fed int ;};func (cmap *CMap )inCodespace (_bef CharCode ,_fc int )bool {for _ ,_dcc :=range cmap ._cb {if _dcc .Low <=_bef &&_bef <=_dcc .High &&_fc ==_dcc .NumBytes {return true ;};};return false ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_fe ,_dcb :=cmap ._ecc [s ];
return _fe ,_dcb };func (_fgc *cMapParser )parseNumber ()(cmapObject ,error ){_cbac ,_bbb :=_ged .ParseNumber (_fgc ._afae );if _bbb !=nil {return nil ,_bbb ;};switch _fbcg :=_cbac .(type ){case *_ged .PdfObjectFloat :return cmapFloat {float64 (*_fbcg )},nil ;
case *_ged .PdfObjectInteger :return cmapInt {int64 (*_fbcg )},nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cbac );};func (cmap *CMap )parseWMode ()error {var _edf int ;
_adff :=false ;for _dfd :=0;_dfd < 3&&!_adff ;_dfd ++{_geeb ,_gbc :=cmap .parseObject ();if _gbc !=nil {return _gbc ;};switch _gfe :=_geeb .(type ){case cmapOperand :switch _gfe .Operand {case "\u0064\u0065\u0066":_adff =true ;default:_dc .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_geeb );
return ErrBadCMap ;};case cmapInt :_edf =int (_gfe ._gaff );};};cmap ._dgd =integer {_ggd :true ,_fed :_edf };return nil ;};func (cmap *CMap )parseName ()error {_beef :="";_dcga :=false ;for _fgga :=0;_fgga < 20&&!_dcga ;_fgga ++{_gbef ,_dag :=cmap .parseObject ();
if _dag !=nil {return _dag ;};switch _gge :=_gbef .(type ){case cmapOperand :switch _gge .Operand {case "\u0064\u0065\u0066":_dcga =true ;default:_dc .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_gbef ,_beef );
if _beef !=""{_beef =_e .Sprintf ("\u0025\u0073\u0020%\u0073",_beef ,_gge .Operand );};_dc .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_beef );
};case cmapName :_beef =_gge .Name ;};};if !_dcga {_dc .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ec =_beef ;return nil ;};type cmapOperand struct{Operand string ;
};type charRange struct{_ea CharCode ;_ef CharCode ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ccf ,_eac :=cmap ._cc [cid ];return _ccf ,_eac ;};type cmapInt struct{_gaff int64 };func (cmap *CMap )NBits ()int {return cmap ._ga };
func _age (_adbca []byte )*cMapParser {_aff :=cMapParser {};_cgcd :=_bd .NewBuffer (_adbca );_aff ._afae =_ba .NewReader (_cgcd );return &_aff ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )parseCodespaceRange ()error {for {_bgg ,_dedc :=cmap .parseObject ();
if _dedc !=nil {if _dedc ==_ge .EOF {break ;};return _dedc ;};_cdd ,_aec :=_bgg .(cmapHexString );if !_aec {if _baf ,_ebd :=_bgg .(cmapOperand );_ebd {if _baf .Operand ==_gbefd {return nil ;};return _d .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_bgg ,_dedc =cmap .parseObject ();if _dedc !=nil {if _dedc ==_ge .EOF {break ;};return _dedc ;};_fggf ,_aec :=_bgg .(cmapHexString );if !_aec {return _d .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_cdd ._cae )!=len (_fggf ._cae ){return _d .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_bdg :=_adba (_cdd );_adfg :=_adba (_fggf );if _adfg < _bdg {_dc .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_bdg ,_adfg );
return ErrBadCMap ;};_dbc :=_fggf ._gef ;_dbg :=Codespace {NumBytes :_dbc ,Low :_bdg ,High :_adfg };cmap ._cb =append (cmap ._cb ,_dbg );_dc .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_bdg ,_adfg );
};if len (cmap ._cb )==0{_dc .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func (_ggbb *cMapParser )parseComment ()(string ,error ){var _bdaf _bd .Buffer ;
_ ,_cad :=_ggbb .skipSpaces ();if _cad !=nil {return _bdaf .String (),_cad ;};_egbg :=true ;for {_bggd ,_adeb :=_ggbb ._afae .Peek (1);if _adeb !=nil {_dc .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_adeb );
return _bdaf .String (),_adeb ;};if _egbg &&_bggd [0]!='%'{return _bdaf .String (),ErrBadCMapComment ;};_egbg =false ;if (_bggd [0]!='\r')&&(_bggd [0]!='\n'){_agdd ,_ :=_ggbb ._afae .ReadByte ();_bdaf .WriteByte (_agdd );}else {break ;};};return _bdaf .String (),nil ;
};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_bcc ,_cfb :=cmap ._fa [code ];return _bcc ,_cfb ;};type cmapObject interface{};func _bdda (_adf string )string {_ced :=[]rune (_adf );_bfb :=make ([]string ,len (_ced ));for _fee ,_fcc :=range _ced {_bfb [_fee ]=_e .Sprintf ("\u0025\u0030\u0034\u0078",_fcc );
};return _e .Sprintf ("\u003c\u0025\u0073\u003e",_ca .Join (_bfb ,""));};func (_dba *cMapParser )skipSpaces ()(int ,error ){_dbeg :=0;for {_dae ,_feg :=_dba ._afae .Peek (1);if _feg !=nil {return 0,_feg ;};if _ged .IsWhiteSpace (_dae [0]){_dba ._afae .ReadByte ();
_dbeg ++;}else {break ;};};return _dbeg ,nil ;};func (cmap *CMap )Bytes ()[]byte {_dc .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._cgf )> 0{return cmap ._cgf ;
};cmap ._cgf =[]byte (_ca .Join ([]string {_cgc ,cmap .toBfData (),_edc },"\u000a"));return cmap ._cgf ;};type fbRange struct{_ab CharCode ;_bda CharCode ;_bf string ;};func _gcb (_abda cmapHexString )[]rune {if len (_abda ._cae )==1{return []rune {rune (_abda ._cae [0])};
};_dfb :=_abda ._cae ;if len (_dfb )%2!=0{_dfb =append (_dfb ,0);_dc .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_abda ,_dfb );
};_ecfa :=len (_dfb )>>1;_gfc :=make ([]uint16 ,_ecfa );for _fbdd :=0;_fbdd < _ecfa ;_fbdd ++{_gfc [_fbdd ]=uint16 (_dfb [_fbdd <<1])<<8+uint16 (_dfb [_fbdd <<1+1]);};_ddgca :=_b .Decode (_gfc );return _ddgca ;};