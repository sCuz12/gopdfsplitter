//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_fg "errors";_f "fmt";_ec "github.com/unidoc/unipdf/v3/common";_e "github.com/unidoc/unipdf/v3/internal/bitwise";_a "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "io";);const (_cf mmrCode =iota ;_ab ;_gc ;_fc ;_gec ;_ag ;_ce ;
_ff ;_fe ;_fd ;_eg ;);func (_cfe *Decoder )UncompressMMR ()(_dg *_a .Bitmap ,_gb error ){_dg =_a .New (_cfe ._fb ,_cfe ._fge );_eb :=make ([]int ,_dg .Width +5);_gae :=make ([]int ,_dg .Width +5);_gae [0]=_dg .Width ;_abcf :=1;var _bff int ;for _fad :=0;
_fad < _dg .Height ;_fad ++{_bff ,_gb =_cfe .uncompress2d (_cfe ._fdg ,_gae ,_abcf ,_eb ,_dg .Width );if _gb !=nil {return nil ,_gb ;};if _bff ==EOF {break ;};if _bff > 0{_gb =_cfe .fillBitmap (_dg ,_fad ,_eb ,_bff );if _gb !=nil {return nil ,_gb ;};};
_gae ,_eb =_eb ,_gae ;_abcf =_bff ;};if _gb =_cfe .detectAndSkipEOL ();_gb !=nil {return nil ,_gb ;};_cfe ._fdg .align ();return _dg ,nil ;};func _ge (_ca ,_ga int )int {if _ca > _ga {return _ga ;};return _ca ;};const (EOF =-3;_fgf =-2;EOL =-1;_egc =8;
_bf =(1<<_egc )-1;_af =5;_cea =(1<<_af )-1;);const (_gdg int =1024<<7;_gbb int =3;_cacd uint =24;);func (_abe *Decoder )createLittleEndianTable (_ee [][3]int )([]*code ,error ){_cac :=make ([]*code ,_bf +1);for _gef :=0;_gef < len (_ee );_gef ++{_cfb :=_fa (_ee [_gef ]);
if _cfb ._ed <=_egc {_dag :=_egc -_cfb ._ed ;_bde :=_cfb ._bg <<uint (_dag );for _aae :=(1<<uint (_dag ))-1;_aae >=0;_aae --{_gg :=_bde |_aae ;_cac [_gg ]=_cfb ;};}else {_cb :=_cfb ._bg >>uint (_cfb ._ed -_egc );if _cac [_cb ]==nil {var _fgc =_fa ([3]int {});
_fgc ._c =make ([]*code ,_cea +1);_cac [_cb ]=_fgc ;};if _cfb ._ed <=_egc +_af {_ecc :=_egc +_af -_cfb ._ed ;_gfc :=(_cfb ._bg <<uint (_ecc ))&_cea ;_cac [_cb ]._cg =true ;for _db :=(1<<uint (_ecc ))-1;_db >=0;_db --{_cac [_cb ]._c [_gfc |_db ]=_cfb ;};
}else {return nil ,_fg .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _cac ,nil ;};type Decoder struct{_fb ,_fge int ;
_fdg *runData ;_cdd []*code ;_fae []*code ;_aa []*code ;};func (_gde *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_ggdc :=_gde ._cdac -_gde ._gab ;if _ggdc < 0||_ggdc > 24{_gfe :=(_gde ._cdac >>3)-_gde ._dgdg ;if _gfe >=_gde ._dafe {_gfe +=_gde ._dgdg ;
if _ade :=_gde .fillBuffer (_gfe );_ade !=nil {return 0,_ade ;};_gfe -=_gde ._dgdg ;};_adc :=(uint32 (_gde ._be [_gfe ]&0xFF)<<16)|(uint32 (_gde ._be [_gfe +1]&0xFF)<<8)|(uint32 (_gde ._be [_gfe +2]&0xFF));_bbe :=uint32 (_gde ._cdac &7);_adc <<=_bbe ;_gde ._ead =int (_adc );
}else {_abb :=_gde ._gab &7;_fgcd :=7-_abb ;if _ggdc <=_fgcd {_gde ._ead <<=uint (_ggdc );}else {_dc :=(_gde ._gab >>3)+3-_gde ._dgdg ;if _dc >=_gde ._dafe {_dc +=_gde ._dgdg ;if _gbgea :=_gde .fillBuffer (_dc );_gbgea !=nil {return 0,_gbgea ;};_dc -=_gde ._dgdg ;
};_abb =8-_abb ;for {_gde ._ead <<=uint (_abb );_gde ._ead |=int (uint (_gde ._be [_dc ])&0xFF);_ggdc -=_abb ;_dc ++;_abb =8;if !(_ggdc >=8){break ;};};_gde ._ead <<=uint (_ggdc );};};_gde ._gab =_gde ._cdac ;return _gde ._ead ,nil ;};type code struct{_ed int ;
_bg int ;_d int ;_c []*code ;_cg bool ;};func (_ad *runData )uncompressGetCode (_bcb []*code )(*code ,error ){return _ad .uncompressGetCodeLittleEndian (_bcb );};func _fa (_cc [3]int )*code {return &code {_ed :_cc [0],_bg :_cc [1],_d :_cc [2]}};func New (r *_e .Reader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_bd :=&Decoder {_fb :width ,_fge :height };
_gf ,_ac :=r .NewPartialReader (int (dataOffset ),int (dataLength ),false );if _ac !=nil {return nil ,_ac ;};_ccb ,_ac :=_dff (_gf );if _ac !=nil {return nil ,_ac ;};_ ,_ac =r .Seek (_gf .RelativePosition (),_b .SeekCurrent );if _ac !=nil {return nil ,_ac ;
};_bd ._fdg =_ccb ;if _fcf :=_bd .initTables ();_fcf !=nil {return nil ,_fcf ;};return _bd ,nil ;};type runData struct{_fcc *_e .Reader ;_cdac int ;_gab int ;_ead int ;_be []byte ;_dgdg int ;_dafe int ;};type mmrCode int ;func (_cdf *runData )fillBuffer (_dbgd int )error {_cdf ._dgdg =_dbgd ;
_ ,_ef :=_cdf ._fcc .Seek (int64 (_dbgd ),_b .SeekStart );if _ef !=nil {if _ef ==_b .EOF {_ec .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_cdf ._dafe =-1;}else {return _ef ;};};if _ef ==nil {_cdf ._dafe ,_ef =_cdf ._fcc .Read (_cdf ._be );
if _ef !=nil {if _ef ==_b .EOF {_ec .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_cdf ._dafe =-1;}else {return _ef ;};};};if _cdf ._dafe > -1&&_cdf ._dafe < 3{for _cdf ._dafe < 3{_cbb ,_edd :=_cdf ._fcc .ReadByte ();if _edd !=nil {if _edd ==_b .EOF {_cdf ._be [_cdf ._dafe ]=0;
}else {return _edd ;};}else {_cdf ._be [_cdf ._dafe ]=_cbb &0xFF;};_cdf ._dafe ++;};};_cdf ._dafe -=3;if _cdf ._dafe < 0{_cdf ._be =make ([]byte ,len (_cdf ._be ));_cdf ._dafe =len (_cdf ._be )-3;};return nil ;};func (_cgc *code )String ()string {return _f .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cgc ._ed ,_cgc ._bg ,_cgc ._d );
};func _bb (_cgb ,_cge int )int {if _cgb < _cge {return _cge ;};return _cgb ;};func _dff (_bee *_e .Reader )(*runData ,error ){_eec :=&runData {_fcc :_bee ,_cdac :0,_gab :1};_gfcf :=_ge (_bb (_gbb ,int (_bee .Length ())),_gdg );_eec ._be =make ([]byte ,_gfcf );
if _acd :=_eec .fillBuffer (0);_acd !=nil {if _acd ==_b .EOF {_eec ._be =make ([]byte ,10);_ec .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_acd );}else {return nil ,_acd ;};};return _eec ,nil ;
};func (_gd *Decoder )initTables ()(_cee error ){if _gd ._cdd ==nil {_gd ._cdd ,_cee =_gd .createLittleEndianTable (_abc );if _cee !=nil {return ;};_gd ._fae ,_cee =_gd .createLittleEndianTable (_da );if _cee !=nil {return ;};_gd ._aa ,_cee =_gd .createLittleEndianTable (_cd );
if _cee !=nil {return ;};};return nil ;};var (_cd =[][3]int {{4,0x1,int (_cf )},{3,0x1,int (_ab )},{1,0x1,int (_gc )},{3,0x3,int (_fc )},{6,0x3,int (_gec )},{7,0x3,int (_ag )},{3,0x2,int (_ce )},{6,0x2,int (_ff )},{7,0x2,int (_fe )},{10,0xf,int (_fd )},{12,0xf,int (_eg )},{12,0x1,int (EOL )}};
_abc =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_fgf },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_fgf },{11,0x01,_fgf },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};
_da =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_fgf },{9,0x18,15},{10,0x01,_fgf },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_fgf },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};
);func (_cbf *runData )uncompressGetCodeLittleEndian (_cbg []*code )(*code ,error ){_aad ,_dea :=_cbf .uncompressGetNextCodeLittleEndian ();if _dea !=nil {_ec .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_dea );
return nil ,_dea ;};_aad &=0xffffff;_gac :=_aad >>(_cacd -_egc );_gfb :=_cbg [_gac ];if _gfb !=nil &&_gfb ._cg {_gac =(_aad >>(_cacd -_egc -_af ))&_cea ;_gfb =_gfb ._c [_gac ];};return _gfb ,nil ;};func (_ggd *runData )align (){_ggd ._cdac =((_ggd ._cdac +7)>>3)<<3};
func (_dac *Decoder )uncompress2d (_bga *runData ,_cce []int ,_ace int ,_acf []int ,_ae int )(int ,error ){var (_egcf int ;_fbf int ;_cda int ;_edb =true ;_ded error ;_gbge *code ;);_cce [_ace ]=_ae ;_cce [_ace +1]=_ae ;_cce [_ace +2]=_ae +1;_cce [_ace +3]=_ae +1;
_dde :for _cda < _ae {_gbge ,_ded =_bga .uncompressGetCode (_dac ._aa );if _ded !=nil {return EOL ,nil ;};if _gbge ==nil {_bga ._cdac ++;break _dde ;};_bga ._cdac +=_gbge ._ed ;switch mmrCode (_gbge ._d ){case _gc :_cda =_cce [_egcf ];case _fc :_cda =_cce [_egcf ]+1;
case _ce :_cda =_cce [_egcf ]-1;case _ab :for {var _daf []*code ;if _edb {_daf =_dac ._cdd ;}else {_daf =_dac ._fae ;};_gbge ,_ded =_bga .uncompressGetCode (_daf );if _ded !=nil {return 0,_ded ;};if _gbge ==nil {break _dde ;};_bga ._cdac +=_gbge ._ed ;
if _gbge ._d < 64{if _gbge ._d < 0{_acf [_fbf ]=_cda ;_fbf ++;_gbge =nil ;break _dde ;};_cda +=_gbge ._d ;_acf [_fbf ]=_cda ;_fbf ++;break ;};_cda +=_gbge ._d ;};_afa :=_cda ;_gcf :for {var _aaa []*code ;if !_edb {_aaa =_dac ._cdd ;}else {_aaa =_dac ._fae ;
};_gbge ,_ded =_bga .uncompressGetCode (_aaa );if _ded !=nil {return 0,_ded ;};if _gbge ==nil {break _dde ;};_bga ._cdac +=_gbge ._ed ;if _gbge ._d < 64{if _gbge ._d < 0{_acf [_fbf ]=_cda ;_fbf ++;break _dde ;};_cda +=_gbge ._d ;if _cda < _ae ||_cda !=_afa {_acf [_fbf ]=_cda ;
_fbf ++;};break _gcf ;};_cda +=_gbge ._d ;};for _cda < _ae &&_cce [_egcf ]<=_cda {_egcf +=2;};continue _dde ;case _cf :_egcf ++;_cda =_cce [_egcf ];_egcf ++;continue _dde ;case _gec :_cda =_cce [_egcf ]+2;case _ff :_cda =_cce [_egcf ]-2;case _ag :_cda =_cce [_egcf ]+3;
case _fe :_cda =_cce [_egcf ]-3;default:if _bga ._cdac ==12&&_gbge ._d ==EOL {_bga ._cdac =0;if _ ,_ded =_dac .uncompress1d (_bga ,_cce ,_ae );_ded !=nil {return 0,_ded ;};_bga ._cdac ++;if _ ,_ded =_dac .uncompress1d (_bga ,_acf ,_ae );_ded !=nil {return 0,_ded ;
};_bba ,_afe :=_dac .uncompress1d (_bga ,_cce ,_ae );if _afe !=nil {return EOF ,_afe ;};_bga ._cdac ++;return _bba ,nil ;};_cda =_ae ;continue _dde ;};if _cda <=_ae {_edb =!_edb ;_acf [_fbf ]=_cda ;_fbf ++;if _egcf > 0{_egcf --;}else {_egcf ++;};for _cda < _ae &&_cce [_egcf ]<=_cda {_egcf +=2;
};};};if _acf [_fbf ]!=_ae {_acf [_fbf ]=_ae ;};if _gbge ==nil {return EOL ,nil ;};return _fbf ,nil ;};func (_egd *Decoder )uncompress1d (_ccbg *runData ,_bbb []int ,_bad int )(int ,error ){var (_dgd =true ;_bda int ;_dge *code ;_fcga int ;_aag error ;
);_ege :for _bda < _bad {_eca :for {if _dgd {_dge ,_aag =_ccbg .uncompressGetCode (_egd ._cdd );if _aag !=nil {return 0,_aag ;};}else {_dge ,_aag =_ccbg .uncompressGetCode (_egd ._fae );if _aag !=nil {return 0,_aag ;};};_ccbg ._cdac +=_dge ._ed ;if _dge ._d < 0{break _ege ;
};_bda +=_dge ._d ;if _dge ._d < 64{_dgd =!_dgd ;_bbb [_fcga ]=_bda ;_fcga ++;break _eca ;};};};if _bbb [_fcga ]!=_bad {_bbb [_fcga ]=_bad ;};_bc :=EOL ;if _dge !=nil &&_dge ._d !=EOL {_bc =_fcga ;};return _bc ,nil ;};func (_gbg *Decoder )fillBitmap (_fgd *_a .Bitmap ,_dd int ,_cgcd []int ,_de int )error {var _dbg byte ;
_ea :=0;_bdg :=_fgd .GetByteIndex (_ea ,_dd );for _ba :=0;_ba < _de ;_ba ++{_abce :=byte (1);_ggc :=_cgcd [_ba ];if (_ba &1)==0{_abce =0;};for _ea < _ggc {_dbg =(_dbg <<1)|_abce ;_ea ++;if (_ea &7)==0{if _egf :=_fgd .SetByte (_bdg ,_dbg );_egf !=nil {return _egf ;
};_bdg ++;_dbg =0;};};};if (_ea &7)!=0{_dbg <<=uint (8-(_ea &7));if _baa :=_fgd .SetByte (_bdg ,_dbg );_baa !=nil {return _baa ;};};return nil ;};func (_bfa *Decoder )detectAndSkipEOL ()error {for {_bfb ,_df :=_bfa ._fdg .uncompressGetCode (_bfa ._aa );
if _df !=nil {return _df ;};if _bfb !=nil &&_bfb ._d ==EOL {_bfa ._fdg ._cdac +=_bfb ._ed ;}else {return nil ;};};};