//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_df "errors";_db "fmt";_d "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_fd "math";_f "strings";);func _fg (_bb *Code )*OutOfBandNode {return &OutOfBandNode {}};var _ Node =&ValueNode {};
func (_cb *EncodedTable )RootNode ()*InternalNode {return _cb ._e };func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_gbd ){return nil ,_df .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dgg :=_gbd [number -1];if _dgg ==nil {var _ebb error ;_dgg ,_ebb =_eccb (_bde [number -1]);if _ebb !=nil {return nil ,_ebb ;};_gbd [number -1]=_dgg ;};return _dgg ,nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_fcc :prefixLength ,_dbf :rangeLength ,_acg :rangeLow ,_bfc :isLowerRange ,_fdb :-1};
};type Tabler interface{Decode (_cgd *_d .Reader )(int64 ,error );InitTree (_gfb []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_eb :=&EncodedTable {_e :&InternalNode {},BasicTabler :table };
if _c :=_eb .parseTable ();_c !=nil {return nil ,_c ;};return _eb ,nil ;};func (_gc *FixedSizeTable )String ()string {return _gc ._ebd .String ()+"\u000a"};func (_ecc *StandardTable )InitTree (codeTable []*Code )error {_cae (codeTable );for _ ,_cca :=range codeTable {if _gcdc :=_ecc ._bg .append (_cca );
_gcdc !=nil {return _gcdc ;};};return nil ;};type InternalNode struct{_ag int32 ;_bcf Node ;_ab Node ;};func (_ba *OutOfBandNode )Decode (r *_d .Reader )(int64 ,error ){return 0,_g .ErrOOB };var _bde =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ccg *InternalNode )pad (_aef *_f .Builder ){for _gb :=int32 (0);_gb < _ccg ._ag ;_gb ++{_aef .WriteString ("\u0020\u0020\u0020");};};func (_ef *EncodedTable )parseTable ()error {var (_gad []*Code ;_fdc ,_cd ,_cf int32 ;_ff uint64 ;_dg error ;);_aa :=_ef .StreamReader ();
_de :=_ef .HtLow ();for _de < _ef .HtHigh (){_ff ,_dg =_aa .ReadBits (byte (_ef .HtPS ()));if _dg !=nil {return _dg ;};_fdc =int32 (_ff );_ff ,_dg =_aa .ReadBits (byte (_ef .HtRS ()));if _dg !=nil {return _dg ;};_cd =int32 (_ff );_gad =append (_gad ,NewCode (_fdc ,_cd ,_cf ,false ));
_de +=1<<uint (_cd );};_ff ,_dg =_aa .ReadBits (byte (_ef .HtPS ()));if _dg !=nil {return _dg ;};_fdc =int32 (_ff );_cd =32;_cf =_ef .HtLow ()-1;_gad =append (_gad ,NewCode (_fdc ,_cd ,_cf ,true ));_ff ,_dg =_aa .ReadBits (byte (_ef .HtPS ()));if _dg !=nil {return _dg ;
};_fdc =int32 (_ff );_cd =32;_cf =_ef .HtHigh ();_gad =append (_gad ,NewCode (_fdc ,_cd ,_cf ,false ));if _ef .HtOOB ()==1{_ff ,_dg =_aa .ReadBits (byte (_ef .HtPS ()));if _dg !=nil {return _dg ;};_fdc =int32 (_ff );_gad =append (_gad ,NewCode (_fdc ,-1,-1,false ));
};if _dg =_ef .InitTree (_gad );_dg !=nil {return _dg ;};return nil ;};func (_bd *EncodedTable )String ()string {return _bd ._e .String ()+"\u000a"};func (_dbg *FixedSizeTable )RootNode ()*InternalNode {return _dbg ._ebd };func (_cda *InternalNode )Decode (r *_d .Reader )(int64 ,error ){_bae ,_beg :=r .ReadBit ();
if _beg !=nil {return 0,_beg ;};if _bae ==0{return _cda ._bcf .Decode (r );};return _cda ._ab .Decode (r );};func _gg (_cde ,_gba int32 )string {var _af int32 ;_bdc :=make ([]rune ,_gba );for _ebg :=int32 (1);_ebg <=_gba ;_ebg ++{_af =_cde >>uint (_gba -_ebg )&1;
if _af !=0{_bdc [_ebg -1]='1';}else {_bdc [_ebg -1]='0';};};return string (_bdc );};func (_ec *InternalNode )String ()string {_ecf :=&_f .Builder {};_ecf .WriteString ("\u000a");_ec .pad (_ecf );_ecf .WriteString ("\u0030\u003a\u0020");_ecf .WriteString (_ec ._bcf .String ()+"\u000a");
_ec .pad (_ecf );_ecf .WriteString ("\u0031\u003a\u0020");_ecf .WriteString (_ec ._ab .String ()+"\u000a");return _ecf .String ();};type FixedSizeTable struct{_ebd *InternalNode };func (_ga *EncodedTable )Decode (r *_d .Reader )(int64 ,error ){return _ga ._e .Decode (r )};
func _ege (_bgf ,_ece int32 )int32 {if _bgf > _ece {return _bgf ;};return _ece ;};func _cae (_dgge []*Code ){var _edf int32 ;for _ ,_cdg :=range _dgge {_edf =_ege (_edf ,_cdg ._fcc );};_bbg :=make ([]int32 ,_edf +1);for _ ,_ddc :=range _dgge {_bbg [_ddc ._fcc ]++;
};var _edd int32 ;_dc :=make ([]int32 ,len (_bbg )+1);_bbg [0]=0;for _ded :=int32 (1);_ded <=int32 (len (_bbg ));_ded ++{_dc [_ded ]=(_dc [_ded -1]+(_bbg [_ded -1]))<<1;_edd =_dc [_ded ];for _ ,_gd :=range _dgge {if _gd ._fcc ==_ded {_gd ._fdb =_edd ;_edd ++;
};};};};func _fc (_fga *Code )*ValueNode {return &ValueNode {_ae :_fga ._dbf ,_cbc :_fga ._acg ,_ac :_fga ._bfc }};var _ Node =&OutOfBandNode {};func (_cdf *ValueNode )Decode (r *_d .Reader )(int64 ,error ){_bda ,_eg :=r .ReadBits (byte (_cdf ._ae ));if _eg !=nil {return 0,_eg ;
};if _cdf ._ac {_bda =-_bda ;};return int64 (_cdf ._cbc )+int64 (_bda ),nil ;};type OutOfBandNode struct{};func (_ad *EncodedTable )InitTree (codeTable []*Code )error {_cae (codeTable );for _ ,_da :=range codeTable {if _dae :=_ad ._e .append (_da );_dae !=nil {return _dae ;
};};return nil ;};func (_fdcc *FixedSizeTable )InitTree (codeTable []*Code )error {_cae (codeTable );for _ ,_aag :=range codeTable {_ca :=_fdcc ._ebd .append (_aag );if _ca !=nil {return _ca ;};};return nil ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_cg :=&FixedSizeTable {_ebd :&InternalNode {}};
if _cc :=_cg .InitTree (codeTable );_cc !=nil {return nil ,_cc ;};return _cg ,nil ;};func _ffe (_egd int32 )*InternalNode {return &InternalNode {_ag :_egd }};type Code struct{_fcc int32 ;_dbf int32 ;_acg int32 ;_bfc bool ;_fdb int32 ;};type Node interface{Decode (_dbb *_d .Reader )(int64 ,error );
String ()string ;};type StandardTable struct{_bg *InternalNode };type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_d .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_dd *InternalNode )append (_fb *Code )(_aea error ){if _fb ._fcc ==0{return nil ;
};_fa :=_fb ._fcc -1-_dd ._ag ;if _fa < 0{return _df .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_egg :=(_fb ._fdb >>uint (_fa ))&0x1;
if _fa ==0{if _fb ._dbf ==-1{if _egg ==1{if _dd ._ab !=nil {return _db .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fb );};_dd ._ab =_fg (_fb );}else {if _dd ._bcf !=nil {return _db .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fb );
};_dd ._bcf =_fg (_fb );};}else {if _egg ==1{if _dd ._ab !=nil {return _db .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fb );
};_dd ._ab =_fc (_fb );}else {if _dd ._bcf !=nil {return _db .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fb );
};_dd ._bcf =_fc (_fb );};};}else {if _egg ==1{if _dd ._ab ==nil {_dd ._ab =_ffe (_dd ._ag +1);};if _aea =_dd ._ab .(*InternalNode ).append (_fb );_aea !=nil {return _aea ;};}else {if _dd ._bcf ==nil {_dd ._bcf =_ffe (_dd ._ag +1);};if _aea =_dd ._bcf .(*InternalNode ).append (_fb );
_aea !=nil {return _aea ;};};};return nil ;};func (_def *StandardTable )String ()string {return _def ._bg .String ()+"\u000a"};var _gbd =make ([]Tabler ,len (_bde ));func (_caa *OutOfBandNode )String ()string {return _db .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_fd .MaxInt64 ));
};func (_be *FixedSizeTable )Decode (r *_d .Reader )(int64 ,error ){return _be ._ebd .Decode (r )};func (_bdg *StandardTable )RootNode ()*InternalNode {return _bdg ._bg };var _ Node =&InternalNode {};type EncodedTable struct{BasicTabler ;_e *InternalNode ;
};func (_bc *ValueNode )String ()string {return _db .Sprintf ("\u0025\u0064\u002f%\u0064",_bc ._ae ,_bc ._cbc );};func _eccb (_cgb [][]int32 )(*StandardTable ,error ){var _cad []*Code ;for _eba :=0;_eba < len (_cgb );_eba ++{_fcg :=_cgb [_eba ][0];_ed :=_cgb [_eba ][1];
_dfd :=_cgb [_eba ][2];var _adg bool ;if len (_cgb [_eba ])> 3{_adg =true ;};_cad =append (_cad ,NewCode (_fcg ,_ed ,_dfd ,_adg ));};_bfg :=&StandardTable {_bg :_ffe (0)};if _bfb :=_bfg .InitTree (_cad );_bfb !=nil {return nil ,_bfb ;};return _bfg ,nil ;
};type ValueNode struct{_ae int32 ;_cbc int32 ;_ac bool ;};func (_dda *Code )String ()string {var _cfe string ;if _dda ._fdb !=-1{_cfe =_gg (_dda ._fdb ,_dda ._fcc );}else {_cfe ="\u003f";};return _db .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cfe ,_dda ._fcc ,_dda ._dbf ,_dda ._acg );
};func (_fgf *StandardTable )Decode (r *_d .Reader )(int64 ,error ){return _fgf ._bg .Decode (r )};var _ Tabler =&EncodedTable {};