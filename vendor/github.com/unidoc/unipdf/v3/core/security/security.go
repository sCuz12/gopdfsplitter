//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_adc "bytes";_aa "crypto/aes";_ce "crypto/cipher";_fc "crypto/md5";_cb "crypto/rand";_f "crypto/rc4";_a "crypto/sha256";_b "crypto/sha512";_de "encoding/binary";_ad "errors";_e "fmt";_df "github.com/unidoc/unipdf/v3/common";_d "hash";
_g "io";_ae "math";);func (stdHandlerR4 )paddedPass (_acd []byte )[]byte {_cgb :=make ([]byte ,32);_ee :=copy (_cgb ,_acd );for ;_ee < 32;_ee ++{_cgb [_ee ]=_fg [_ee -len (_acd )];};return _cgb ;};var _ StdHandler =stdHandlerR4 {};type stdHandlerR4 struct{Length int ;
ID0 string ;};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_gfd stdHandlerR6 )alg8 (_cbc *StdEncryptDict ,_gaf []byte ,_dbcg []byte )error {if _dae :=_af ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_gaf );
_dae !=nil {return _dae ;};var _fgf [16]byte ;if _ ,_cad :=_g .ReadFull (_cb .Reader ,_fgf [:]);_cad !=nil {return _cad ;};_cfd :=_fgf [0:8];_fdf :=_fgf [8:16];_daa :=make ([]byte ,len (_dbcg )+len (_cfd ));_aed :=copy (_daa ,_dbcg );copy (_daa [_aed :],_cfd );
_afae ,_edc :=_gfd .alg2b (_cbc .R ,_daa ,_dbcg ,nil );if _edc !=nil {return _edc ;};U :=make ([]byte ,len (_afae )+len (_cfd )+len (_fdf ));_aed =copy (U ,_afae [:32]);_aed +=copy (U [_aed :],_cfd );copy (U [_aed :],_fdf );_cbc .U =U ;_aed =len (_dbcg );
copy (_daa [_aed :],_fdf );_afae ,_edc =_gfd .alg2b (_cbc .R ,_daa ,_dbcg ,nil );if _edc !=nil {return _edc ;};_gbg ,_edc :=_dfgd (_afae [:32]);if _edc !=nil {return _edc ;};_dfbg :=make ([]byte ,_aa .BlockSize );_efc :=_ce .NewCBCEncrypter (_gbg ,_dfbg );
UE :=make ([]byte ,32);_efc .CryptBlocks (UE ,_gaf [:32]);_cbc .UE =UE ;return nil ;};func (_cd *ecbDecrypter )BlockSize ()int {return _cd ._dc };func _ga (_dd _ce .Block )*ecb {return &ecb {_cg :_dd ,_dc :_dd .BlockSize ()}};const (PermOwner =Permissions (_ae .MaxUint32 );
PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11);
);func (_fge stdHandlerR6 )alg12 (_bgfg *StdEncryptDict ,_edg []byte )([]byte ,error ){if _daaa :=_af ("\u0061\u006c\u00671\u0032","\u0055",48,_bgfg .U );_daaa !=nil {return nil ,_daaa ;};if _egg :=_af ("\u0061\u006c\u00671\u0032","\u004f",48,_bgfg .O );
_egg !=nil {return nil ,_egg ;};_aag :=make ([]byte ,len (_edg )+8+48);_ced :=copy (_aag ,_edg );_ced +=copy (_aag [_ced :],_bgfg .O [32:40]);_ced +=copy (_aag [_ced :],_bgfg .U [0:48]);_fgc ,_fcc :=_fge .alg2b (_bgfg .R ,_aag ,_edg ,_bgfg .U [0:48]);if _fcc !=nil {return nil ,_fcc ;
};_fgc =_fgc [:32];if !_adc .Equal (_fgc ,_bgfg .O [:32]){return nil ,nil ;};return _fgc ,nil ;};func (_adf stdHandlerR6 )alg11 (_fcd *StdEncryptDict ,_deb []byte )([]byte ,error ){if _faeb :=_af ("\u0061\u006c\u00671\u0031","\u0055",48,_fcd .U );_faeb !=nil {return nil ,_faeb ;
};_fbga :=make ([]byte ,len (_deb )+8);_bfc :=copy (_fbga ,_deb );_bfc +=copy (_fbga [_bfc :],_fcd .U [32:40]);_ggb ,_dde :=_adf .alg2b (_fcd .R ,_fbga ,_deb ,nil );if _dde !=nil {return nil ,_dde ;};_ggb =_ggb [:32];if !_adc .Equal (_ggb ,_fcd .U [:32]){return nil ,nil ;
};return _ggb ,nil ;};type stdHandlerR6 struct{};func (_cac errInvalidField )Error ()string {return _e .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_cac .Func ,_cac .Field ,_cac .Exp ,_cac .Got );
};func (_cea *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_cea ._dc !=0{_df .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_df .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_cea ._cg .Encrypt (dst ,src [:_cea ._dc ]);src =src [_cea ._dc :];dst =dst [_cea ._dc :];};};type ecbEncrypter ecb ;

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;

// Authenticate implements StdHandler interface.
func (_ecg stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_df .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_ddg ,_fb :=_ecg .alg7 (d ,pass );if _fb !=nil {return nil ,0,_fb ;};if _ddg !=nil {_df .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _ddg ,PermOwner ,nil ;
};_df .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_ddg ,_fb =_ecg .alg6 (d ,pass );if _fb !=nil {return nil ,0,_fb ;};
if _ddg !=nil {_df .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _ddg ,d .P ,nil ;};return nil ,0,nil ;};func _fagd (_ebc []byte )([]byte ,error ){_bec :=_a .New ();
_bec .Write (_ebc );return _bec .Sum (nil ),nil ;};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e"););func _dfgd (_ffa []byte )(_ce .Block ,error ){_dg ,_ecc :=_aa .NewCipher (_ffa );
if _ecc !=nil {_df .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_ecc );
return nil ,_ecc ;};return _dg ,nil ;};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;func (_adb stdHandlerR6 )alg13 (_afe *StdEncryptDict ,_aba []byte )error {if _eaa :=_af ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_aba );_eaa !=nil {return _eaa ;};if _afcg :=_af ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_afe .Perms );
_afcg !=nil {return _afcg ;};_cddd :=make ([]byte ,16);copy (_cddd ,_afe .Perms [:16]);_bdg ,_gga :=_aa .NewCipher (_aba [:32]);if _gga !=nil {return _gga ;};_ffff :=_ba (_bdg );_ffff .CryptBlocks (_cddd ,_cddd );if !_adc .Equal (_cddd [9:12],[]byte ("\u0061\u0064\u0062")){return _ad .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_bcb :=Permissions (_de .LittleEndian .Uint32 (_cddd [0:4]));if _bcb !=_afe .P {return _ad .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _cgfd bool ;if _cddd [8]=='T'{_cgfd =true ;}else if _cddd [8]=='F'{_cgfd =false ;}else {return _ad .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _cgfd !=_afe .EncryptMetadata {return _ad .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};var _ StdHandler =stdHandlerR6 {};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};func (_efd stdHandlerR4 )alg4 (_fd []byte ,_gcg []byte )([]byte ,error ){_cfc ,_eea :=_f .NewCipher (_fd );if _eea !=nil {return nil ,_ad .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_fed :=[]byte (_fg );_fac :=make ([]byte ,len (_fed ));_cfc .XORKeyStream (_fac ,_fed );return _fac ,nil ;};func (_adcd stdHandlerR4 )alg3 (R int ,_fe ,_efa []byte )([]byte ,error ){var _aaf []byte ;if len (_efa )> 0{_aaf =_adcd .alg3Key (R ,_efa );}else {_aaf =_adcd .alg3Key (R ,_fe );
};_gb ,_gad :=_f .NewCipher (_aaf );if _gad !=nil {return nil ,_ad .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_dbf :=_adcd .paddedPass (_fe );_aga :=make ([]byte ,len (_dbf ));_gb .XORKeyStream (_aga ,_dbf );
if R >=3{_aee :=make ([]byte ,len (_aaf ));for _caf :=0;_caf < 19;_caf ++{for _fa :=0;_fa < len (_aaf );_fa ++{_aee [_fa ]=_aaf [_fa ]^byte (_caf +1);};_ge ,_dca :=_f .NewCipher (_aee );if _dca !=nil {return nil ,_ad .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ge .XORKeyStream (_aga ,_aga );};};return _aga ,nil ;};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};func (_bfbc stdHandlerR6 )alg9 (_feg *StdEncryptDict ,_ebe []byte ,_fafg []byte )error {if _bae :=_af ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_ebe );
_bae !=nil {return _bae ;};if _aae :=_af ("\u0061\u006c\u0067\u0039","\u0055",48,_feg .U );_aae !=nil {return _aae ;};var _cgbda [16]byte ;if _ ,_edafg :=_g .ReadFull (_cb .Reader ,_cgbda [:]);_edafg !=nil {return _edafg ;};_faec :=_cgbda [0:8];_agb :=_cgbda [8:16];
_baff :=_feg .U [:48];_cgf :=make ([]byte ,len (_fafg )+len (_faec )+len (_baff ));_edfg :=copy (_cgf ,_fafg );_edfg +=copy (_cgf [_edfg :],_faec );_edfg +=copy (_cgf [_edfg :],_baff );_egff ,_adcg :=_bfbc .alg2b (_feg .R ,_cgf ,_fafg ,_baff );if _adcg !=nil {return _adcg ;
};O :=make ([]byte ,len (_egff )+len (_faec )+len (_agb ));_edfg =copy (O ,_egff [:32]);_edfg +=copy (O [_edfg :],_faec );_edfg +=copy (O [_edfg :],_agb );_feg .O =O ;_edfg =len (_fafg );_edfg +=copy (_cgf [_edfg :],_agb );_egff ,_adcg =_bfbc .alg2b (_feg .R ,_cgf ,_fafg ,_baff );
if _adcg !=nil {return _adcg ;};_dgc ,_adcg :=_dfgd (_egff [:32]);if _adcg !=nil {return _adcg ;};_gbbg :=make ([]byte ,_aa .BlockSize );_bfe :=_ce .NewCBCEncrypter (_dgc ,_gbbg );OE :=make ([]byte ,32);_bfe .CryptBlocks (OE ,_ebe [:32]);_feg .OE =OE ;
return nil ;};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_ef *StdEncryptDict ,_gd ,_cf []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_ca *StdEncryptDict ,_ed []byte )([]byte ,Permissions ,error );};func _ac (_ddb _ce .Block )_ce .BlockMode {return (*ecbEncrypter )(_ga (_ddb ))};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;};func _bab (_egf []byte ,_cfcb int ){_fga :=_cfcb ;
for _fga < len (_egf ){copy (_egf [_fga :],_egf [:_fga ]);_fga *=2;};};func (_db *ecbEncrypter )BlockSize ()int {return _db ._dc };func (_ffd stdHandlerR4 )alg3Key (R int ,_gc []byte )[]byte {_gg :=_fc .New ();_cga :=_ffd .paddedPass (_gc );_gg .Write (_cga );
if R >=3{for _dff :=0;_dff < 50;_dff ++{_dfb :=_gg .Sum (nil );_gg =_fc .New ();_gg .Write (_dfb );};};_gde :=_gg .Sum (nil );if R ==2{_gde =_gde [0:5];}else {_gde =_gde [0:_ffd .Length /8];};return _gde ;};type ecb struct{_cg _ce .Block ;_dc int ;};

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_gfb stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_edag :=make ([]byte ,32);if _ ,_cgba :=_g .ReadFull (_cb .Reader ,_edag );_cgba !=nil {return nil ,_cgba ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;
d .Perms =nil ;if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _fbe :=_gfb .alg8 (d ,_edag ,upass );_fbe !=nil {return nil ,_fbe ;};if _dec :=_gfb .alg9 (d ,_edag ,opass );_dec !=nil {return nil ,_dec ;};if d .R ==5{return _edag ,nil ;
};if _aeg :=_gfb .alg10 (d ,_edag );_aeg !=nil {return nil ,_aeg ;};return _edag ,nil ;};func (_ebg stdHandlerR4 )alg2 (_ag *StdEncryptDict ,_ff []byte )[]byte {_df .Log .Trace ("\u0061\u006c\u0067\u0032");_bag :=_ebg .paddedPass (_ff );_gf :=_fc .New ();
_gf .Write (_bag );_gf .Write (_ag .O );var _bfb [4]byte ;_de .LittleEndian .PutUint32 (_bfb [:],uint32 (_ag .P ));_gf .Write (_bfb [:]);_df .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_bfb );_gf .Write ([]byte (_ebg .ID0 ));_df .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_ag .R ,_ag .EncryptMetadata );
if (_ag .R >=4)&&!_ag .EncryptMetadata {_gf .Write ([]byte {0xff,0xff,0xff,0xff});};_cc :=_gf .Sum (nil );if _ag .R >=3{_gf =_fc .New ();for _bg :=0;_bg < 50;_bg ++{_gf .Reset ();_gf .Write (_cc [0:_ebg .Length /8]);_cc =_gf .Sum (nil );};};if _ag .R >=3{return _cc [0:_ebg .Length /8];
};return _cc [0:5];};

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_bgf stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_ggd :=_bgf .alg3 (d .R ,upass ,opass );if _ggd !=nil {_df .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ggd );
return nil ,_ggd ;};d .O =O ;_df .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_ggdb :=_bgf .alg2 (d ,upass );U ,_ggd :=_bgf .alg5 (_ggdb ,upass );if _ggd !=nil {_df .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_ggd );
return nil ,_ggd ;};d .U =U ;_df .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _ggdb ,nil ;};func _egd (_bac ,_edb ,_ggg []byte )([]byte ,error ){var (_gbd ,_bgg ,_cbd _d .Hash ;);_gbd =_a .New ();_dad :=make ([]byte ,64);
_dfba :=_gbd ;_dfba .Write (_bac );K :=_dfba .Sum (_dad [:0]);_dfgg :=make ([]byte ,64*(127+64+48));_fcg :=func (_ea int )([]byte ,error ){_aea :=len (_edb )+len (K )+len (_ggg );_efbgd :=_dfgg [:_aea ];_dffa :=copy (_efbgd ,_edb );_dffa +=copy (_efbgd [_dffa :],K [:]);
_dffa +=copy (_efbgd [_dffa :],_ggg );if _dffa !=_aea {_df .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_ad .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_dfgg [:_aea *64];_bab (K1 ,_aea );_cff ,_dba :=_dfgd (K [0:16]);if _dba !=nil {return nil ,_dba ;};_gfa :=_ce .NewCBCEncrypter (_cff ,K [16:32]);_gfa .CryptBlocks (K1 ,K1 );
E :=K1 ;_bfg :=0;for _cca :=0;_cca < 16;_cca ++{_bfg +=int (E [_cca ]%3);};var _eff _d .Hash ;switch _bfg %3{case 0:_eff =_gbd ;case 1:if _bgg ==nil {_bgg =_b .New384 ();};_eff =_bgg ;case 2:if _cbd ==nil {_cbd =_b .New ();};_eff =_cbd ;};_eff .Reset ();
_eff .Write (E );K =_eff .Sum (_dad [:0]);return E ,nil ;};for _bfbd :=0;;{E ,_bff :=_fcg (_bfbd );if _bff !=nil {return nil ,_bff ;};_gbac :=E [len (E )-1];_bfbd ++;if _bfbd >=64&&_gbac <=uint8 (_bfbd -32){break ;};};return K [:32],nil ;};func (_ec stdHandlerR4 )alg6 (_ebd *StdEncryptDict ,_gba []byte )([]byte ,error ){var (_bb []byte ;
_faf error ;);_fea :=_ec .alg2 (_ebd ,_gba );if _ebd .R ==2{_bb ,_faf =_ec .alg4 (_fea ,_gba );}else if _ebd .R >=3{_bb ,_faf =_ec .alg5 (_fea ,_gba );}else {return nil ,_ad .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _faf !=nil {return nil ,_faf ;
};_df .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_bb ),string (_ebd .U ));_afab :=_bb ;_aaa :=_ebd .U ;if _ebd .R >=3{if len (_afab )> 16{_afab =_afab [0:16];};if len (_aaa )> 16{_aaa =_aaa [0:16];
};};if !_adc .Equal (_afab ,_aaa ){return nil ,nil ;};return _fea ,nil ;};func (_ggdc stdHandlerR6 )alg2a (_gbb *StdEncryptDict ,_fff []byte )([]byte ,Permissions ,error ){if _be :=_af ("\u0061\u006c\u00672\u0061","\u004f",48,_gbb .O );_be !=nil {return nil ,0,_be ;
};if _dddd :=_af ("\u0061\u006c\u00672\u0061","\u0055",48,_gbb .U );_dddd !=nil {return nil ,0,_dddd ;};if len (_fff )> 127{_fff =_fff [:127];};_bba ,_abb :=_ggdc .alg12 (_gbb ,_fff );if _abb !=nil {return nil ,0,_abb ;};var (_fbg []byte ;_bea []byte ;
_cae []byte ;);var _ebb Permissions ;if len (_bba )!=0{_ebb =PermOwner ;_ceg :=make ([]byte ,len (_fff )+8+48);_edf :=copy (_ceg ,_fff );_edf +=copy (_ceg [_edf :],_gbb .O [40:48]);copy (_ceg [_edf :],_gbb .U [0:48]);_fbg =_ceg ;_bea =_gbb .OE ;_cae =_gbb .U [0:48];
}else {_bba ,_abb =_ggdc .alg11 (_gbb ,_fff );if _abb ==nil &&len (_bba )==0{_bba ,_abb =_ggdc .alg11 (_gbb ,[]byte (""));};if _abb !=nil {return nil ,0,_abb ;}else if len (_bba )==0{return nil ,0,nil ;};_ebb =_gbb .P ;_bc :=make ([]byte ,len (_fff )+8);
_dbb :=copy (_bc ,_fff );copy (_bc [_dbb :],_gbb .U [40:48]);_fbg =_bc ;_bea =_gbb .UE ;_cae =nil ;};if _dbcc :=_af ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_bea );_dbcc !=nil {return nil ,0,_dbcc ;};_bea =_bea [:32];_efbg ,_abb :=_ggdc .alg2b (_gbb .R ,_fbg ,_fff ,_cae );
if _abb !=nil {return nil ,0,_abb ;};_cgbd ,_abb :=_aa .NewCipher (_efbg [:32]);if _abb !=nil {return nil ,0,_abb ;};_cge :=make ([]byte ,_aa .BlockSize );_fbf :=_ce .NewCBCDecrypter (_cgbd ,_cge );_eg :=make ([]byte ,32);_fbf .CryptBlocks (_eg ,_bea );
if _gbb .R ==5{return _eg ,_ebb ,nil ;};_abb =_ggdc .alg13 (_gbb ,_eg );if _abb !=nil {return nil ,0,_abb ;};return _eg ,_ebb ,nil ;};const _fg ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";


// Allowed checks if a set of permissions can be granted.
func (_cfg Permissions )Allowed (p2 Permissions )bool {return _cfg &p2 ==p2 };func _af (_eb ,_afa string ,_dfd int ,_afc []byte )error {if len (_afc )< _dfd {return errInvalidField {Func :_eb ,Field :_afa ,Exp :_dfd ,Got :len (_afc )};};return nil ;};type ecbDecrypter ecb ;
func (_fab stdHandlerR4 )alg7 (_ceb *StdEncryptDict ,_gbc []byte )([]byte ,error ){_age :=_fab .alg3Key (_ceb .R ,_gbc );_fag :=make ([]byte ,len (_ceb .O ));if _ceb .R ==2{_ab ,_cgc :=_f .NewCipher (_age );if _cgc !=nil {return nil ,_ad .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_ab .XORKeyStream (_fag ,_ceb .O );}else if _ceb .R >=3{_bbf :=append ([]byte {},_ceb .O ...);for _da :=0;_da < 20;_da ++{_ddd :=append ([]byte {},_age ...);for _bagd :=0;_bagd < len (_age );_bagd ++{_ddd [_bagd ]^=byte (19-_da );};_baf ,_gfe :=_f .NewCipher (_ddd );
if _gfe !=nil {return nil ,_ad .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_baf .XORKeyStream (_fag ,_bbf );_bbf =append ([]byte {},_fag ...);};}else {return nil ,_ad .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");
};_dcf ,_ggc :=_fab .alg6 (_ceb ,_fag );if _ggc !=nil {return nil ,nil ;};return _dcf ,nil ;};func (_dbc stdHandlerR4 )alg5 (_ddf []byte ,_efb []byte )([]byte ,error ){_gcb :=_fc .New ();_gcb .Write ([]byte (_fg ));_gcb .Write ([]byte (_dbc .ID0 ));_eda :=_gcb .Sum (nil );
_df .Log .Trace ("\u0061\u006c\u0067\u0035");_df .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_ddf );_df .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_dbc .ID0 );if len (_eda )!=16{return nil ,_ad .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");
};_ceac ,_edd :=_f .NewCipher (_ddf );if _edd !=nil {return nil ,_ad .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_gef :=make ([]byte ,16);_ceac .XORKeyStream (_gef ,_eda );_fdd :=make ([]byte ,len (_ddf ));
for _bd :=0;_bd < 19;_bd ++{for _gab :=0;_gab < len (_ddf );_gab ++{_fdd [_gab ]=_ddf [_gab ]^byte (_bd +1);};_ceac ,_edd =_f .NewCipher (_fdd );if _edd !=nil {return nil ,_ad .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_ceac .XORKeyStream (_gef ,_gef );_df .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_bd ,_fdd );_df .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_bd ,_gef );
};_cda :=make ([]byte ,32);for _acdb :=0;_acdb < 16;_acdb ++{_cda [_acdb ]=_gef [_acdb ];};_ ,_edd =_cb .Read (_cda [16:32]);if _edd !=nil {return nil ,_ad .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _cda ,nil ;};func (_fgff stdHandlerR6 )alg10 (_bfga *StdEncryptDict ,_ffb []byte )error {if _dfc :=_af ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_ffb );_dfc !=nil {return _dfc ;};_cdd :=uint64 (uint32 (_bfga .P ))|(_ae .MaxUint32 <<32);
Perms :=make ([]byte ,16);_de .LittleEndian .PutUint64 (Perms [:8],_cdd );if _bfga .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_ffbc :=_g .ReadFull (_cb .Reader ,Perms [12:16]);_ffbc !=nil {return _ffbc ;
};_dffg ,_cbe :=_dfgd (_ffb [:32]);if _cbe !=nil {return _cbe ;};_bbe :=_ac (_dffg );_bbe .CryptBlocks (Perms ,Perms );_bfga .Perms =Perms [:16];return nil ;};func (_bf *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_bf ._dc !=0{_df .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_df .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_bf ._cg .Decrypt (dst ,src [:_bf ._dc ]);src =src [_bf ._dc :];dst =dst [_bf ._dc :];};};func _ba (_fca _ce .Block )_ce .BlockMode {return (*ecbDecrypter )(_ga (_fca ))};

// Authenticate implements StdHandler interface.
func (_ffg stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _ffg .alg2a (d ,pass );};func (_cgg stdHandlerR6 )alg2b (R int ,_dac ,_ece ,_efg []byte )([]byte ,error ){if R ==5{return _fagd (_dac );};return _egd (_dac ,_ece ,_efg );
};