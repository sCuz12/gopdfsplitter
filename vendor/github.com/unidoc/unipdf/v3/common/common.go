//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_e "fmt";_b "io";_ee "os";_g "path/filepath";_c "runtime";_d "time";);const Version ="\u0033\u002e\u0035\u0033\u002e\u0030";var Log Logger =DummyLogger {};

// Trace logs trace message.
func (_dddf WriterLogger )Trace (format string ,args ...interface{}){if _dddf .LogLevel >=LogLevelTrace {_ce :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_dddf .logToWriter (_dddf .Output ,_ce ,format ,args ...);};};

// Warning logs warning message.
func (_dae WriterLogger )Warning (format string ,args ...interface{}){if _dae .LogLevel >=LogLevelWarning {_agd :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_dae .logToWriter (_dae .Output ,_agd ,format ,args ...);};};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};const _feb =15;

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_be string ,_ad ...interface{});Warning (_ca string ,_dd ...interface{});Notice (_ag string ,_ge ...interface{});Info (_cc string ,_bb ...interface{});Debug (_ab string ,_db ...interface{});Trace (_ec string ,_dde ...interface{});
IsLogLevel (_abf LogLevel )bool ;};

// Error logs error message.
func (_cg ConsoleLogger )Error (format string ,args ...interface{}){if _cg .LogLevel >=LogLevelError {_aa :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_cg .output (_ee .Stdout ,_aa ,format ,args ...);};};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Notice logs notice message.
func (_bgc ConsoleLogger )Notice (format string ,args ...interface{}){if _bgc .LogLevel >=LogLevelNotice {_eg :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_bgc .output (_ee .Stdout ,_eg ,format ,args ...);};};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// Info logs info message.
func (_geb ConsoleLogger )Info (format string ,args ...interface{}){if _geb .LogLevel >=LogLevelInfo {_bed :="\u005bI\u004e\u0046\u004f\u005d\u0020";_geb .output (_ee .Stdout ,_bed ,format ,args ...);};};

// Debug logs debug message.
func (_gd ConsoleLogger )Debug (format string ,args ...interface{}){if _gd .LogLevel >=LogLevelDebug {_de :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_gd .output (_ee .Stdout ,_de ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;
LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};func (_bf WriterLogger )logToWriter (_af _b .Writer ,_fd string ,_afc string ,_eb ...interface{}){_adf (_af ,_fd ,_afc ,_eb );};

// Debug logs debug message.
func (_edc WriterLogger )Debug (format string ,args ...interface{}){if _edc .LogLevel >=LogLevelDebug {_efb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_edc .logToWriter (_edc .Output ,_efb ,format ,args ...);};};

// Error logs error message.
func (_dda WriterLogger )Error (format string ,args ...interface{}){if _dda .LogLevel >=LogLevelError {_ef :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_dda .logToWriter (_dda .Output ,_ef ,format ,args ...);};};const _ccgg =12;

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_agf WriterLogger )IsLogLevel (level LogLevel )bool {return _agf .LogLevel >=level };

// Notice logs notice message.
func (_ddd WriterLogger )Notice (format string ,args ...interface{}){if _ddd .LogLevel >=LogLevelNotice {_ed :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ddd .logToWriter (_ddd .Output ,_ed ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _b .Writer ;};

// Warning logs warning message.
func (_bg ConsoleLogger )Warning (format string ,args ...interface{}){if _bg .LogLevel >=LogLevelWarning {_f :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_bg .output (_ee .Stdout ,_f ,format ,args ...);};};func (_da ConsoleLogger )output (_ac _b .Writer ,_bd string ,_ccg string ,_bba ...interface{}){_adf (_ac ,_bd ,_ccg ,_bba ...);
};

// Trace logs trace message.
func (_gg ConsoleLogger )Trace (format string ,args ...interface{}){if _gg .LogLevel >=LogLevelTrace {_ga :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gg .output (_ee .Stdout ,_ga ,format ,args ...);};};

// DummyLogger does nothing.
type DummyLogger struct{};var ReleasedAt =_d .Date (_fcf ,_ccgg ,_ecb ,_feb ,_gc ,0,0,_d .UTC );func _adf (_ae _b .Writer ,_bgb string ,_cgc string ,_fe ...interface{}){_ ,_gf ,_aef ,_gac :=_c .Caller (3);if !_gac {_gf ="\u003f\u003f\u003f";_aef =0;}else {_gf =_g .Base (_gf );
};_def :=_e .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_bgb ,_gf ,_aef )+_cgc +"\u000a";_e .Fprintf (_ae ,_def ,_fe ...);};const _gc =30;

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ba ConsoleLogger )IsLogLevel (level LogLevel )bool {return _ba .LogLevel >=level };

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _d .Time )string {return t .Format (_cd )+"\u0020\u0055\u0054\u0043"};const _fcf =2023;

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _b .Writer )*WriterLogger {_df :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_df ;};const _cd ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";


// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};const _ecb =17;

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// Info logs info message.
func (_fc WriterLogger )Info (format string ,args ...interface{}){if _fc .LogLevel >=LogLevelInfo {_cb :="\u005bI\u004e\u0046\u004f\u005d\u0020";_fc .logToWriter (_fc .Output ,_cb ,format ,args ...);};};